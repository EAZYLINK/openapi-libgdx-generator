{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Project REST API",
    "description" : "Generated REST API documentation",
    "version" : "0.1"
  },
  "servers" : [ {
    "url" : "/rest"
  } ],
  "tags" : [ {
    "name" : "Ban",
    "description" : "Entity CRUD operations"
  }, {
    "name" : "User",
    "description" : "Entity CRUD operations"
  }, {
    "name" : "audit_EntitySnapshot",
    "description" : "Entity CRUD operations"
  }, {
    "name" : "dynat_Category",
    "description" : "Entity CRUD operations"
  }, {
    "name" : "authentication",
    "description" : "Middleware services execution"
  } ],
  "paths" : {
    "/entities/dynat_Category" : {
      "get" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Gets a list of entities: dynat_Category",
        "description" : "Gets a list of entities",
        "parameters" : [ {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The list of entities is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_dynat_Category"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Creates new entity: dynat_Category",
        "description" : "The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.",
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_dynat_Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Entity created. The created entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_dynat_Category"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the entity may have a reference to the non-existing entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to create the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/dynat_Category/{entityId}" : {
      "get" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Gets a single entity by identifier: dynat_Category",
        "description" : "Gets a single entity by identifier",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_dynat_Category"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Updates the entity: dynat_Category",
        "description" : "Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Entity identifier"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_dynat_Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. The updated entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_dynat_Category"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to update the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Deletes the entity: dynat_Category",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entity was deleted."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to delete the entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/dynat_Category/search" : {
      "get" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Find entities by filter conditions: dynat_Category",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "JSON with filter definition"
          }
        }, {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_dynat_Category"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "dynat_Category" ],
        "summary" : "Find entities by filter conditions: dynat_Category",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.",
        "requestBody" : {
          "description" : "JSON with search parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "filter" : {
                    "type" : "string",
                    "description" : "JSON with filter definition"
                  },
                  "dynamicAttributes" : {
                    "type" : "boolean",
                    "description" : "Specifies whether entity dynamic attributes should be returned."
                  },
                  "returnCount" : {
                    "type" : "boolean",
                    "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header."
                  },
                  "offset" : {
                    "type" : "string",
                    "description" : "Position of the first result to retrieve."
                  },
                  "returnNulls" : {
                    "type" : "boolean",
                    "description" : "Specifies whether null fields will be written to the result JSON."
                  },
                  "limit" : {
                    "type" : "string",
                    "description" : "Number of extracted entities."
                  },
                  "sort" : {
                    "type" : "string",
                    "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used."
                  },
                  "fetchPlan" : {
                    "type" : "string",
                    "description" : "Name of the fetchPlan which is used for loading the entity."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_dynat_Category"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/User" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Gets a list of entities: User",
        "description" : "Gets a list of entities",
        "parameters" : [ {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The list of entities is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_User"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Creates new entity: User",
        "description" : "The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.",
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Entity created. The created entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the entity may have a reference to the non-existing entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to create the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/User/{entityId}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Gets a single entity by identifier: User",
        "description" : "Gets a single entity by identifier",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Updates the entity: User",
        "description" : "Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Entity identifier"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. The updated entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to update the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Deletes the entity: User",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entity was deleted."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to delete the entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/User/search" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Find entities by filter conditions: User",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "JSON with filter definition"
          }
        }, {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Find entities by filter conditions: User",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.",
        "requestBody" : {
          "description" : "JSON with search parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "filter" : {
                    "type" : "string",
                    "description" : "JSON with filter definition"
                  },
                  "dynamicAttributes" : {
                    "type" : "boolean",
                    "description" : "Specifies whether entity dynamic attributes should be returned."
                  },
                  "returnCount" : {
                    "type" : "boolean",
                    "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header."
                  },
                  "offset" : {
                    "type" : "string",
                    "description" : "Position of the first result to retrieve."
                  },
                  "returnNulls" : {
                    "type" : "boolean",
                    "description" : "Specifies whether null fields will be written to the result JSON."
                  },
                  "limit" : {
                    "type" : "string",
                    "description" : "Number of extracted entities."
                  },
                  "sort" : {
                    "type" : "string",
                    "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used."
                  },
                  "fetchPlan" : {
                    "type" : "string",
                    "description" : "Name of the fetchPlan which is used for loading the entity."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/Ban" : {
      "get" : {
        "tags" : [ "Ban" ],
        "summary" : "Gets a list of entities: Ban",
        "description" : "Gets a list of entities",
        "parameters" : [ {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The list of entities is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_Ban"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Ban" ],
        "summary" : "Creates new entity: Ban",
        "description" : "The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.",
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_Ban"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Entity created. The created entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_Ban"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the entity may have a reference to the non-existing entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to create the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/Ban/{entityId}" : {
      "get" : {
        "tags" : [ "Ban" ],
        "summary" : "Gets a single entity by identifier: Ban",
        "description" : "Gets a single entity by identifier",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_Ban"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Ban" ],
        "summary" : "Updates the entity: Ban",
        "description" : "Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Entity identifier"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_Ban"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. The updated entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_Ban"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to update the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Ban" ],
        "summary" : "Deletes the entity: Ban",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entity was deleted."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to delete the entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/Ban/search" : {
      "get" : {
        "tags" : [ "Ban" ],
        "summary" : "Find entities by filter conditions: Ban",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "JSON with filter definition"
          }
        }, {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_Ban"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Ban" ],
        "summary" : "Find entities by filter conditions: Ban",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.",
        "requestBody" : {
          "description" : "JSON with search parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "filter" : {
                    "type" : "string",
                    "description" : "JSON with filter definition"
                  },
                  "dynamicAttributes" : {
                    "type" : "boolean",
                    "description" : "Specifies whether entity dynamic attributes should be returned."
                  },
                  "returnCount" : {
                    "type" : "boolean",
                    "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header."
                  },
                  "offset" : {
                    "type" : "string",
                    "description" : "Position of the first result to retrieve."
                  },
                  "returnNulls" : {
                    "type" : "boolean",
                    "description" : "Specifies whether null fields will be written to the result JSON."
                  },
                  "limit" : {
                    "type" : "string",
                    "description" : "Number of extracted entities."
                  },
                  "sort" : {
                    "type" : "string",
                    "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used."
                  },
                  "fetchPlan" : {
                    "type" : "string",
                    "description" : "Name of the fetchPlan which is used for loading the entity."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_Ban"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/audit_EntitySnapshot" : {
      "get" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Gets a list of entities: audit_EntitySnapshot",
        "description" : "Gets a list of entities",
        "parameters" : [ {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The list of entities is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Creates new entity: audit_EntitySnapshot",
        "description" : "The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.",
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Entity created. The created entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the entity may have a reference to the non-existing entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to create the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/audit_EntitySnapshot/{entityId}" : {
      "get" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Gets a single entity by identifier: audit_EntitySnapshot",
        "description" : "Gets a single entity by identifier",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Updates the entity: audit_EntitySnapshot",
        "description" : "Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Entity identifier"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object with the entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. The updated entity is returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to update the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Deletes the entity: audit_EntitySnapshot",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entity was deleted."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to delete the entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/audit_EntitySnapshot/search" : {
      "get" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Find entities by filter conditions: audit_EntitySnapshot",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "JSON with filter definition"
          }
        }, {
          "name" : "returnCount",
          "in" : "query",
          "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Position of the first result to retrieve.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of extracted entities.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dynamicAttributes",
          "in" : "query",
          "description" : "Specifies whether entity dynamic attributes should be returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "returnNulls",
          "in" : "query",
          "description" : "Specifies whether null fields will be written to the result JSON.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fetchPlan",
          "in" : "query",
          "description" : "Name of the fetchPlan which is used for loading the entity.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "audit_EntitySnapshot" ],
        "summary" : "Find entities by filter conditions: audit_EntitySnapshot",
        "description" : "Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.",
        "requestBody" : {
          "description" : "JSON with search parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "filter" : {
                    "type" : "string",
                    "description" : "JSON with filter definition"
                  },
                  "dynamicAttributes" : {
                    "type" : "boolean",
                    "description" : "Specifies whether entity dynamic attributes should be returned."
                  },
                  "returnCount" : {
                    "type" : "boolean",
                    "description" : "Specifies whether the total count of entities should be returned in the 'X-Total-Count' header."
                  },
                  "offset" : {
                    "type" : "string",
                    "description" : "Position of the first result to retrieve."
                  },
                  "returnNulls" : {
                    "type" : "boolean",
                    "description" : "Specifies whether null fields will be written to the result JSON."
                  },
                  "limit" : {
                    "type" : "string",
                    "description" : "Number of extracted entities."
                  },
                  "sort" : {
                    "type" : "string",
                    "description" : "Name of the field to be sorted by. If the name is preceding by the '+' character, then the sort order is ascending, if by the '-' character then descending. If there is no special character before the property name, then ascending sort will be used."
                  },
                  "fetchPlan" : {
                    "type" : "string",
                    "description" : "Name of the fetchPlan which is used for loading the entity."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success. Entities that conforms filter conditions are returned in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/entity_audit_EntitySnapshot"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. For example, the condition value cannot be parsed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to read the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found. MetaClass for the entity with the given name not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/services/authentication/loginWithCustomId" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#loginWithCustomId",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ {
          "name" : "customId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "createIfNotExists",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#loginWithCustomId",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "customId" : {
                    "type" : "string",
                    "example" : "String"
                  },
                  "createIfNotExists" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/services/authentication/loginAnonymously" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#loginAnonymously",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#loginAnonymously",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/services/authentication/addUsernamePassword" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#addUsernamePassword",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "description" : "void"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#addUsernamePassword",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "user" : {
                    "$ref" : "#/components/schemas/entity_User"
                  },
                  "username" : {
                    "type" : "string",
                    "example" : "String"
                  },
                  "email" : {
                    "type" : "string",
                    "example" : "String"
                  },
                  "password" : {
                    "type" : "string",
                    "example" : "String"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "description" : "void"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/services/authentication/loginWithEmail" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#loginWithEmail",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "authentication#loginWithEmail",
        "description" : "Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "example" : "String"
                  },
                  "password" : {
                    "type" : "string",
                    "example" : "String"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/entity_User"
                }
              }
            }
          },
          "204" : {
            "description" : "No content. This status is returned when the service method was executed successfully but returns null or is of void type."
          },
          "403" : {
            "description" : "Forbidden. The user doesn't have permissions to invoke the service method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "error" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "description" : "Error message"
          },
          "details" : {
            "type" : "string",
            "description" : "Detailed error description"
          }
        }
      },
      "entity_dynat_Category" : {
        "type" : "object",
        "properties" : {
          "_entityName" : {
            "type" : "string",
            "default" : "dynat_Category"
          },
          "_instanceName" : {
            "type" : "string",
            "default" : "name,localeNames"
          },
          "localeNames" : {
            "type" : "string",
            "example" : "String"
          },
          "updatedBy" : {
            "type" : "string",
            "example" : "String"
          },
          "entityType" : {
            "type" : "string",
            "example" : "String"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 42
          },
          "deletedBy" : {
            "type" : "string",
            "example" : "String"
          },
          "special" : {
            "type" : "string",
            "example" : "String"
          },
          "deleteTs" : {
            "type" : "string",
            "format" : "date-time"
          },
          "isDefault" : {
            "type" : "boolean",
            "example" : true
          },
          "createdBy" : {
            "type" : "string",
            "example" : "String"
          },
          "name" : {
            "type" : "string",
            "example" : "String"
          },
          "createTs" : {
            "type" : "string",
            "format" : "date-time"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "19474a3b-99b5-482e-9e77-852be9adf817"
          },
          "updateTs" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "entity_User" : {
        "type" : "object",
        "properties" : {
          "_entityName" : {
            "type" : "string",
            "default" : "User"
          },
          "_instanceName" : {
            "type" : "string",
            "default" : "firstName,lastName,username"
          },
          "country" : {
            "type" : "string",
            "example" : "String"
          },
          "lastName" : {
            "type" : "string",
            "example" : "String"
          },
          "city" : {
            "type" : "string",
            "example" : "String"
          },
          "lastModifiedDate" : {
            "type" : "string",
            "description" : "java.time.OffsetDateTime"
          },
          "timeZoneId" : {
            "type" : "string",
            "example" : "String"
          },
          "latitude" : {
            "type" : "number",
            "example" : 3.14
          },
          "lastModifiedBy" : {
            "type" : "string",
            "example" : "String"
          },
          "active" : {
            "type" : "boolean",
            "example" : true
          },
          "bans" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/entity_Ban"
            }
          },
          "customId" : {
            "type" : "string",
            "example" : "String"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 42
          },
          "deletedBy" : {
            "type" : "string",
            "example" : "String"
          },
          "firstName" : {
            "type" : "string",
            "example" : "String"
          },
          "password" : {
            "type" : "string",
            "example" : "String"
          },
          "createdDate" : {
            "type" : "string",
            "description" : "java.time.OffsetDateTime"
          },
          "createdBy" : {
            "type" : "string",
            "example" : "String"
          },
          "deletedDate" : {
            "type" : "string",
            "description" : "java.time.OffsetDateTime"
          },
          "countryCode" : {
            "type" : "string",
            "example" : "String"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "19474a3b-99b5-482e-9e77-852be9adf817"
          },
          "email" : {
            "type" : "string",
            "example" : "String"
          },
          "longitude" : {
            "type" : "number",
            "example" : 3.14
          },
          "username" : {
            "type" : "string",
            "example" : "String"
          }
        }
      },
      "entity_Ban" : {
        "type" : "object",
        "properties" : {
          "_entityName" : {
            "type" : "string",
            "default" : "Ban"
          },
          "_instanceName" : {
            "type" : "string",
            "default" : ""
          },
          "reason" : {
            "type" : "string",
            "example" : "String"
          },
          "createdDate" : {
            "type" : "string",
            "description" : "java.time.OffsetDateTime"
          },
          "createdBy" : {
            "type" : "string",
            "example" : "String"
          },
          "lastModifiedDate" : {
            "type" : "string",
            "description" : "java.time.OffsetDateTime"
          },
          "deletedDate" : {
            "type" : "string",
            "description" : "java.time.OffsetDateTime"
          },
          "bannedBy" : {
            "$ref" : "#/components/schemas/entity_User"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "example" : "String"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "19474a3b-99b5-482e-9e77-852be9adf817"
          },
          "user" : {
            "$ref" : "#/components/schemas/entity_User"
          },
          "deletedBy" : {
            "type" : "string",
            "example" : "String"
          }
        }
      },
      "entity_audit_EntitySnapshot" : {
        "type" : "object",
        "properties" : {
          "_entityName" : {
            "type" : "string",
            "default" : "audit_EntitySnapshot"
          },
          "_instanceName" : {
            "type" : "string",
            "default" : ""
          },
          "snapshotXml" : {
            "type" : "string",
            "example" : "String"
          },
          "snapshotDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string",
            "example" : "String"
          },
          "fetchPlanXml" : {
            "type" : "string",
            "example" : "String"
          },
          "entityMetaClass" : {
            "type" : "string",
            "example" : "String"
          },
          "authorUsername" : {
            "type" : "string",
            "example" : "String"
          },
          "sysTenantId" : {
            "type" : "string",
            "example" : "String"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "19474a3b-99b5-482e-9e77-852be9adf817"
          }
        }
      }
    }
  }
}
package {{apiPackage}};

import com.badlogic.gdx.Net.HttpRequest;
import com.badlogic.gdx.Net.HttpRequestBuilder;
import com.badlogic.gdx.Net.HttpResponseListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.utils.Json;

import java.util.Map;
import java.util.HashMap;
import java.net.URLEncoder;

public class {{classname}} {

    private final Json json = new Json();

    private String buildQuery(Map<String, Object> params) {
        StringBuilder query = new StringBuilder();
        for (Map.Entry<String, Object> entry : params.entrySet()) {
            if (entry.getValue() != null) {
                if (query.length() > 0) query.append("&");
                query.append(entry.getKey()).append("=")
                     .append(URLEncoder.encode(entry.getValue().toString()));
            }
        }
        return query.toString();
    }

{{#operations.operation}}
    /**
     * {{summary}}
     */
    public void {{operationId}}(
        {{#allParams}}{{dataType}} {{paramName}}{{^last}}, {{/last}}{{/allParams}}
        {{#allParams.length}}, {{/allParams.length}}HttpResponseListener callback
    ) {
        Map<String, Object> queryParams = new HashMap<>();
        {{#queryParams}}
        queryParams.put("{{paramName}}", {{paramName}});
        {{/queryParams}}

        String query = buildQuery(queryParams);
        String url = "/rest{{path}}" + (query.isEmpty() ? "" : "?" + query);

        HttpRequestBuilder builder = new HttpRequestBuilder()
            .newRequest()
            .method("{{httpMethod}}")
            .url(url);
        
        {{#hasBodyParam}}
        builder.header("Content-Type", "application/json");
        builder.content(json.toJson({{bodyParam.paramName}}));
        {{/hasBodyParam}}

        HttpRequest request = builder.build();
        Gdx.net.sendHttpRequest(request, callback);
    }
{{/operations.operation}}

}


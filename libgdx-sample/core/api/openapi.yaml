openapi: 3.0.1
info:
  description: Generated REST API documentation
  title: Project REST API
  version: "0.1"
servers:
- url: /rest
tags:
- description: Entity CRUD operations
  name: Ban
- description: Entity CRUD operations
  name: User
- description: Entity CRUD operations
  name: audit_EntitySnapshot
- description: Entity CRUD operations
  name: dynat_Category
- description: Middleware services execution
  name: authentication
paths:
  /entities/dynat_Category:
    get:
      description: Gets a list of entities
      parameters:
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_dynat_Category'
                type: array
          description: Success. The list of entities is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a list of entities: dynat_Category"
      tags:
      - dynat_Category
      x-accepts: application/json
    post:
      description: The method expects a JSON with entity object in the request body.
        The entity object may contain references to other entities.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_dynat_Category'
        description: JSON object with the entity
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_dynat_Category'
          description: Entity created. The created entity is returned in the response
            body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the entity may have a reference\
            \ to the non-existing entity."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to create the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Creates new entity: dynat_Category"
      tags:
      - dynat_Category
      x-content-type: application/json
      x-accepts: application/json
  /entities/dynat_Category/{entityId}:
    delete:
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. Entity was deleted.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to delete the
            entity
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Deletes the entity: dynat_Category"
      tags:
      - dynat_Category
      x-accepts: application/json
    get:
      description: Gets a single entity by identifier
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_dynat_Category'
          description: Success. The entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a single entity by identifier: dynat_Category"
      tags:
      - dynat_Category
      x-accepts: application/json
    put:
      description: Updates the entity. Only fields that are passed in the JSON object
        (the request body) are updated.
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          description: Entity identifier
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_dynat_Category'
        description: JSON object with the entity
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_dynat_Category'
          description: Success. The updated entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to update the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Updates the entity: dynat_Category"
      tags:
      - dynat_Category
      x-content-type: application/json
      x-accepts: application/json
  /entities/dynat_Category/search:
    get:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed as URL parameter.
      parameters:
      - explode: true
        in: query
        name: filter
        required: true
        schema:
          description: JSON with filter definition
          type: string
        style: form
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_dynat_Category'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: dynat_Category"
      tags:
      - dynat_Category
      x-accepts: application/json
    post:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed in body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_entities_dynat_Category_search_post_request'
        description: JSON with search parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_dynat_Category'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: dynat_Category"
      tags:
      - dynat_Category
      x-content-type: application/json
      x-accepts: application/json
  /entities/User:
    get:
      description: Gets a list of entities
      parameters:
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_User'
                type: array
          description: Success. The list of entities is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a list of entities: User"
      tags:
      - User
      x-accepts: application/json
    post:
      description: The method expects a JSON with entity object in the request body.
        The entity object may contain references to other entities.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_User'
        description: JSON object with the entity
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Entity created. The created entity is returned in the response
            body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the entity may have a reference\
            \ to the non-existing entity."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to create the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Creates new entity: User"
      tags:
      - User
      x-content-type: application/json
      x-accepts: application/json
  /entities/User/{entityId}:
    delete:
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. Entity was deleted.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to delete the
            entity
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Deletes the entity: User"
      tags:
      - User
      x-accepts: application/json
    get:
      description: Gets a single entity by identifier
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Success. The entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a single entity by identifier: User"
      tags:
      - User
      x-accepts: application/json
    put:
      description: Updates the entity. Only fields that are passed in the JSON object
        (the request body) are updated.
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          description: Entity identifier
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_User'
        description: JSON object with the entity
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Success. The updated entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to update the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Updates the entity: User"
      tags:
      - User
      x-content-type: application/json
      x-accepts: application/json
  /entities/User/search:
    get:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed as URL parameter.
      parameters:
      - explode: true
        in: query
        name: filter
        required: true
        schema:
          description: JSON with filter definition
          type: string
        style: form
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_User'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: User"
      tags:
      - User
      x-accepts: application/json
    post:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed in body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_entities_dynat_Category_search_post_request'
        description: JSON with search parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_User'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: User"
      tags:
      - User
      x-content-type: application/json
      x-accepts: application/json
  /entities/Ban:
    get:
      description: Gets a list of entities
      parameters:
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_Ban'
                type: array
          description: Success. The list of entities is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a list of entities: Ban"
      tags:
      - Ban
      x-accepts: application/json
    post:
      description: The method expects a JSON with entity object in the request body.
        The entity object may contain references to other entities.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_Ban'
        description: JSON object with the entity
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_Ban'
          description: Entity created. The created entity is returned in the response
            body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the entity may have a reference\
            \ to the non-existing entity."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to create the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Creates new entity: Ban"
      tags:
      - Ban
      x-content-type: application/json
      x-accepts: application/json
  /entities/Ban/{entityId}:
    delete:
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. Entity was deleted.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to delete the
            entity
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Deletes the entity: Ban"
      tags:
      - Ban
      x-accepts: application/json
    get:
      description: Gets a single entity by identifier
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_Ban'
          description: Success. The entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a single entity by identifier: Ban"
      tags:
      - Ban
      x-accepts: application/json
    put:
      description: Updates the entity. Only fields that are passed in the JSON object
        (the request body) are updated.
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          description: Entity identifier
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_Ban'
        description: JSON object with the entity
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_Ban'
          description: Success. The updated entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to update the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Updates the entity: Ban"
      tags:
      - Ban
      x-content-type: application/json
      x-accepts: application/json
  /entities/Ban/search:
    get:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed as URL parameter.
      parameters:
      - explode: true
        in: query
        name: filter
        required: true
        schema:
          description: JSON with filter definition
          type: string
        style: form
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_Ban'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: Ban"
      tags:
      - Ban
      x-accepts: application/json
    post:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed in body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_entities_dynat_Category_search_post_request'
        description: JSON with search parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_Ban'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: Ban"
      tags:
      - Ban
      x-content-type: application/json
      x-accepts: application/json
  /entities/audit_EntitySnapshot:
    get:
      description: Gets a list of entities
      parameters:
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_audit_EntitySnapshot'
                type: array
          description: Success. The list of entities is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a list of entities: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-accepts: application/json
    post:
      description: The method expects a JSON with entity object in the request body.
        The entity object may contain references to other entities.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_audit_EntitySnapshot'
        description: JSON object with the entity
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_audit_EntitySnapshot'
          description: Entity created. The created entity is returned in the response
            body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the entity may have a reference\
            \ to the non-existing entity."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to create the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Creates new entity: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-content-type: application/json
      x-accepts: application/json
  /entities/audit_EntitySnapshot/{entityId}:
    delete:
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. Entity was deleted.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to delete the
            entity
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Deletes the entity: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-accepts: application/json
    get:
      description: Gets a single entity by identifier
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_audit_EntitySnapshot'
          description: Success. The entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Gets a single entity by identifier: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-accepts: application/json
    put:
      description: Updates the entity. Only fields that are passed in the JSON object
        (the request body) are updated.
      parameters:
      - description: Entity identifier
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          description: Entity identifier
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity_audit_EntitySnapshot'
        description: JSON object with the entity
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_audit_EntitySnapshot'
          description: Success. The updated entity is returned in the response body.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to update the
            entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Updates the entity: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-content-type: application/json
      x-accepts: application/json
  /entities/audit_EntitySnapshot/search:
    get:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed as URL parameter.
      parameters:
      - explode: true
        in: query
        name: filter
        required: true
        schema:
          description: JSON with filter definition
          type: string
        style: form
      - description: Specifies whether the total count of entities should be returned
          in the 'X-Total-Count' header.
        explode: true
        in: query
        name: returnCount
        required: false
        schema:
          type: boolean
        style: form
      - description: Position of the first result to retrieve.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Number of extracted entities.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: "Name of the field to be sorted by. If the name is preceding\
          \ by the '+' character, then the sort order is ascending, if by the '-'\
          \ character then descending. If there is no special character before the\
          \ property name, then ascending sort will be used."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      - description: Specifies whether entity dynamic attributes should be returned.
        explode: true
        in: query
        name: dynamicAttributes
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether null fields will be written to the result JSON.
        explode: true
        in: query
        name: returnNulls
        required: false
        schema:
          type: boolean
        style: form
      - description: Name of the fetchPlan which is used for loading the entity.
        explode: true
        in: query
        name: fetchPlan
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_audit_EntitySnapshot'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-accepts: application/json
    post:
      description: Finds entities by filter conditions. The filter is defined by JSON
        object that is passed in body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_entities_dynat_Category_search_post_request'
        description: JSON with search parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entity_audit_EntitySnapshot'
                type: array
          description: Success. Entities that conforms filter conditions are returned
            in the response body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: "Bad request. For example, the condition value cannot be parsed."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to read the entity.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not found. MetaClass for the entity with the given name not
            found.
      summary: "Find entities by filter conditions: audit_EntitySnapshot"
      tags:
      - audit_EntitySnapshot
      x-content-type: application/json
      x-accepts: application/json
  /services/authentication/loginWithCustomId:
    get:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters:
      - explode: true
        in: query
        name: customId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: createIfNotExists
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#loginWithCustomId
      tags:
      - authentication
      x-accepts: application/json
    post:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_authentication_loginWithCustomId_post_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#loginWithCustomId
      tags:
      - authentication
      x-content-type: application/json
      x-accepts: application/json
  /services/authentication/loginAnonymously:
    get:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#loginAnonymously
      tags:
      - authentication
      x-accepts: application/json
    post:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#loginAnonymously
      tags:
      - authentication
      x-content-type: application/json
      x-accepts: application/json
  /services/authentication/addUsernamePassword:
    get:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters:
      - explode: true
        in: query
        name: user
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: void
                type: string
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#addUsernamePassword
      tags:
      - authentication
      x-accepts: application/json
    post:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_authentication_addUsernamePassword_post_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: void
                type: string
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#addUsernamePassword
      tags:
      - authentication
      x-content-type: application/json
      x-accepts: application/json
  /services/authentication/loginWithEmail:
    get:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#loginWithEmail
      tags:
      - authentication
      x-accepts: application/json
    post:
      description: Executes the service method. This request expects query parameters
        with the names defined in services configuration on the middleware.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_authentication_loginWithEmail_post_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity_User'
          description: Returns the result of the method execution. It can be of simple
            datatype as well as JSON that represents an entity or entities collection.
        "204":
          description: No content. This status is returned when the service method
            was executed successfully but returns null or is of void type.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden. The user doesn't have permissions to invoke the
            service method.
      summary: authentication#loginWithEmail
      tags:
      - authentication
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    error:
      properties:
        error:
          description: Error message
          type: string
        details:
          description: Detailed error description
          type: string
      type: object
    entity_dynat_Category:
      example:
        localeNames: String
        updatedBy: String
        entityType: String
        version: 42
        deletedBy: String
        special: String
        deleteTs: 2000-01-23T04:56:07.000+00:00
        isDefault: true
        createdBy: String
        name: String
        createTs: 2000-01-23T04:56:07.000+00:00
        _entityName: dynat_Category
        _instanceName: "name,localeNames"
        id: 19474a3b-99b5-482e-9e77-852be9adf817
        updateTs: 2000-01-23T04:56:07.000+00:00
      properties:
        _entityName:
          default: dynat_Category
          type: string
        _instanceName:
          default: "name,localeNames"
          type: string
        localeNames:
          example: String
          type: string
        updatedBy:
          example: String
          type: string
        entityType:
          example: String
          type: string
        version:
          example: 42
          format: int32
          type: integer
        deletedBy:
          example: String
          type: string
        special:
          example: String
          type: string
        deleteTs:
          format: date-time
          type: string
        isDefault:
          example: true
          type: boolean
        createdBy:
          example: String
          type: string
        name:
          example: String
          type: string
        createTs:
          format: date-time
          type: string
        id:
          example: 19474a3b-99b5-482e-9e77-852be9adf817
          format: uuid
          type: string
        updateTs:
          format: date-time
          type: string
      type: object
    entity_User:
      example:
        country: String
        lastName: String
        city: String
        lastModifiedDate: lastModifiedDate
        timeZoneId: String
        latitude: 3.14
        lastModifiedBy: String
        active: true
        bans:
        - reason: String
          createdDate: createdDate
          createdBy: String
          lastModifiedDate: lastModifiedDate
          deletedDate: deletedDate
          bannedBy: null
          lastModifiedBy: String
          _entityName: Ban
          _instanceName: _instanceName
          id: 19474a3b-99b5-482e-9e77-852be9adf817
          user: null
          deletedBy: String
        - reason: String
          createdDate: createdDate
          createdBy: String
          lastModifiedDate: lastModifiedDate
          deletedDate: deletedDate
          bannedBy: null
          lastModifiedBy: String
          _entityName: Ban
          _instanceName: _instanceName
          id: 19474a3b-99b5-482e-9e77-852be9adf817
          user: null
          deletedBy: String
        customId: String
        version: 42
        deletedBy: String
        firstName: String
        password: String
        createdDate: createdDate
        createdBy: String
        deletedDate: deletedDate
        countryCode: String
        _entityName: User
        _instanceName: "firstName,lastName,username"
        id: 19474a3b-99b5-482e-9e77-852be9adf817
        email: String
        longitude: 3.14
        username: String
      properties:
        _entityName:
          default: User
          type: string
        _instanceName:
          default: "firstName,lastName,username"
          type: string
        country:
          example: String
          type: string
        lastName:
          example: String
          type: string
        city:
          example: String
          type: string
        lastModifiedDate:
          description: java.time.OffsetDateTime
          type: string
        timeZoneId:
          example: String
          type: string
        latitude:
          example: 3.14
          type: number
        lastModifiedBy:
          example: String
          type: string
        active:
          example: true
          type: boolean
        bans:
          items:
            $ref: '#/components/schemas/entity_Ban'
          type: array
        customId:
          example: String
          type: string
        version:
          example: 42
          format: int32
          type: integer
        deletedBy:
          example: String
          type: string
        firstName:
          example: String
          type: string
        password:
          example: String
          type: string
        createdDate:
          description: java.time.OffsetDateTime
          type: string
        createdBy:
          example: String
          type: string
        deletedDate:
          description: java.time.OffsetDateTime
          type: string
        countryCode:
          example: String
          type: string
        id:
          example: 19474a3b-99b5-482e-9e77-852be9adf817
          format: uuid
          type: string
        email:
          example: String
          type: string
        longitude:
          example: 3.14
          type: number
        username:
          example: String
          type: string
      type: object
    entity_Ban:
      example:
        reason: String
        createdDate: createdDate
        createdBy: String
        lastModifiedDate: lastModifiedDate
        deletedDate: deletedDate
        bannedBy: null
        lastModifiedBy: String
        _entityName: Ban
        _instanceName: _instanceName
        id: 19474a3b-99b5-482e-9e77-852be9adf817
        user: null
        deletedBy: String
      properties:
        _entityName:
          default: Ban
          type: string
        _instanceName:
          default: ""
          type: string
        reason:
          example: String
          type: string
        createdDate:
          description: java.time.OffsetDateTime
          type: string
        createdBy:
          example: String
          type: string
        lastModifiedDate:
          description: java.time.OffsetDateTime
          type: string
        deletedDate:
          description: java.time.OffsetDateTime
          type: string
        bannedBy:
          $ref: '#/components/schemas/entity_User'
        lastModifiedBy:
          example: String
          type: string
        id:
          example: 19474a3b-99b5-482e-9e77-852be9adf817
          format: uuid
          type: string
        user:
          $ref: '#/components/schemas/entity_User'
        deletedBy:
          example: String
          type: string
      type: object
    entity_audit_EntitySnapshot:
      example:
        snapshotXml: String
        snapshotDate: 2000-01-23T04:56:07.000+00:00
        createdDate: 2000-01-23T04:56:07.000+00:00
        createdBy: String
        fetchPlanXml: String
        entityMetaClass: String
        authorUsername: String
        sysTenantId: String
        _entityName: audit_EntitySnapshot
        _instanceName: _instanceName
        id: 19474a3b-99b5-482e-9e77-852be9adf817
      properties:
        _entityName:
          default: audit_EntitySnapshot
          type: string
        _instanceName:
          default: ""
          type: string
        snapshotXml:
          example: String
          type: string
        snapshotDate:
          format: date-time
          type: string
        createdDate:
          format: date-time
          type: string
        createdBy:
          example: String
          type: string
        fetchPlanXml:
          example: String
          type: string
        entityMetaClass:
          example: String
          type: string
        authorUsername:
          example: String
          type: string
        sysTenantId:
          example: String
          type: string
        id:
          example: 19474a3b-99b5-482e-9e77-852be9adf817
          format: uuid
          type: string
      type: object
    _entities_dynat_Category_search_post_request:
      properties:
        filter:
          description: JSON with filter definition
          type: string
        dynamicAttributes:
          description: Specifies whether entity dynamic attributes should be returned.
          type: boolean
        returnCount:
          description: Specifies whether the total count of entities should be returned
            in the 'X-Total-Count' header.
          type: boolean
        offset:
          description: Position of the first result to retrieve.
          type: string
        returnNulls:
          description: Specifies whether null fields will be written to the result
            JSON.
          type: boolean
        limit:
          description: Number of extracted entities.
          type: string
        sort:
          description: "Name of the field to be sorted by. If the name is preceding\
            \ by the '+' character, then the sort order is ascending, if by the '-'\
            \ character then descending. If there is no special character before the\
            \ property name, then ascending sort will be used."
          type: string
        fetchPlan:
          description: Name of the fetchPlan which is used for loading the entity.
          type: string
    _services_authentication_loginWithCustomId_post_request:
      properties:
        customId:
          example: String
          type: string
        createIfNotExists:
          example: true
          type: boolean
      type: object
    _services_authentication_addUsernamePassword_post_request:
      properties:
        user:
          $ref: '#/components/schemas/entity_User'
        username:
          example: String
          type: string
        email:
          example: String
          type: string
        password:
          example: String
          type: string
      type: object
    _services_authentication_loginWithEmail_post_request:
      properties:
        email:
          example: String
          type: string
        password:
          example: String
          type: string
      type: object


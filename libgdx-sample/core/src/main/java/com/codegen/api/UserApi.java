/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.api;

import com.codegen.ApiCallback;
import com.codegen.ApiClient;
import com.codegen.ApiException;
import com.codegen.ApiResponse;
import com.codegen.Configuration;
import com.codegen.Pair;
import com.codegen.ProgressRequestBody;
import com.codegen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.codegen.models.EntitiesDynatCategorySearchPostRequest;
import com.codegen.models.EntityUser;
import com.codegen.models.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for entitiesUserEntityIdDelete
     * @param entityId Entity identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserEntityIdDeleteCall(String entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/User/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserEntityIdDeleteValidateBeforeCall(String entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entitiesUserEntityIdDelete(Async)");
        }

        return entitiesUserEntityIdDeleteCall(entityId, _callback);

    }

    /**
     * Deletes the entity: User
     * 
     * @param entityId Entity identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public void entitiesUserEntityIdDelete(String entityId) throws ApiException {
        entitiesUserEntityIdDeleteWithHttpInfo(entityId);
    }

    /**
     * Deletes the entity: User
     * 
     * @param entityId Entity identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entitiesUserEntityIdDeleteWithHttpInfo(String entityId) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserEntityIdDeleteValidateBeforeCall(entityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the entity: User (asynchronously)
     * 
     * @param entityId Entity identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserEntityIdDeleteAsync(String entityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserEntityIdDeleteValidateBeforeCall(entityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesUserEntityIdGet
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserEntityIdGetCall(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/User/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dynamicAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dynamicAttributes", dynamicAttributes));
        }

        if (returnNulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnNulls", returnNulls));
        }

        if (fetchPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPlan", fetchPlan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserEntityIdGetValidateBeforeCall(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entitiesUserEntityIdGet(Async)");
        }

        return entitiesUserEntityIdGetCall(entityId, dynamicAttributes, returnNulls, fetchPlan, _callback);

    }

    /**
     * Gets a single entity by identifier: User
     * Gets a single entity by identifier
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser entitiesUserEntityIdGet(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        ApiResponse<EntityUser> localVarResp = entitiesUserEntityIdGetWithHttpInfo(entityId, dynamicAttributes, returnNulls, fetchPlan);
        return localVarResp.getData();
    }

    /**
     * Gets a single entity by identifier: User
     * Gets a single entity by identifier
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> entitiesUserEntityIdGetWithHttpInfo(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserEntityIdGetValidateBeforeCall(entityId, dynamicAttributes, returnNulls, fetchPlan, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a single entity by identifier: User (asynchronously)
     * Gets a single entity by identifier
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserEntityIdGetAsync(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserEntityIdGetValidateBeforeCall(entityId, dynamicAttributes, returnNulls, fetchPlan, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesUserEntityIdPut
     * @param entityId Entity identifier (required)
     * @param entityUser JSON object with the entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserEntityIdPutCall(String entityId, EntityUser entityUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUser;

        // create path and map variables
        String localVarPath = "/entities/User/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserEntityIdPutValidateBeforeCall(String entityId, EntityUser entityUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entitiesUserEntityIdPut(Async)");
        }

        // verify the required parameter 'entityUser' is set
        if (entityUser == null) {
            throw new ApiException("Missing the required parameter 'entityUser' when calling entitiesUserEntityIdPut(Async)");
        }

        return entitiesUserEntityIdPutCall(entityId, entityUser, _callback);

    }

    /**
     * Updates the entity: User
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     * @param entityId Entity identifier (required)
     * @param entityUser JSON object with the entity (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser entitiesUserEntityIdPut(String entityId, EntityUser entityUser) throws ApiException {
        ApiResponse<EntityUser> localVarResp = entitiesUserEntityIdPutWithHttpInfo(entityId, entityUser);
        return localVarResp.getData();
    }

    /**
     * Updates the entity: User
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     * @param entityId Entity identifier (required)
     * @param entityUser JSON object with the entity (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> entitiesUserEntityIdPutWithHttpInfo(String entityId, EntityUser entityUser) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserEntityIdPutValidateBeforeCall(entityId, entityUser, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the entity: User (asynchronously)
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     * @param entityId Entity identifier (required)
     * @param entityUser JSON object with the entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserEntityIdPutAsync(String entityId, EntityUser entityUser, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserEntityIdPutValidateBeforeCall(entityId, entityUser, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesUserGet
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserGetCall(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/User";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnCount", returnCount));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (dynamicAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dynamicAttributes", dynamicAttributes));
        }

        if (returnNulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnNulls", returnNulls));
        }

        if (fetchPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPlan", fetchPlan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserGetValidateBeforeCall(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        return entitiesUserGetCall(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);

    }

    /**
     * Gets a list of entities: User
     * Gets a list of entities
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return List&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityUser> entitiesUserGet(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        ApiResponse<List<EntityUser>> localVarResp = entitiesUserGetWithHttpInfo(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        return localVarResp.getData();
    }

    /**
     * Gets a list of entities: User
     * Gets a list of entities
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return ApiResponse&lt;List&lt;EntityUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityUser>> entitiesUserGetWithHttpInfo(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserGetValidateBeforeCall(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, null);
        Type localVarReturnType = new TypeToken<List<EntityUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of entities: User (asynchronously)
     * Gets a list of entities
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserGetAsync(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback<List<EntityUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserGetValidateBeforeCall(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);
        Type localVarReturnType = new TypeToken<List<EntityUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesUserPost
     * @param entityUser JSON object with the entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserPostCall(EntityUser entityUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUser;

        // create path and map variables
        String localVarPath = "/entities/User";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserPostValidateBeforeCall(EntityUser entityUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityUser' is set
        if (entityUser == null) {
            throw new ApiException("Missing the required parameter 'entityUser' when calling entitiesUserPost(Async)");
        }

        return entitiesUserPostCall(entityUser, _callback);

    }

    /**
     * Creates new entity: User
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     * @param entityUser JSON object with the entity (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser entitiesUserPost(EntityUser entityUser) throws ApiException {
        ApiResponse<EntityUser> localVarResp = entitiesUserPostWithHttpInfo(entityUser);
        return localVarResp.getData();
    }

    /**
     * Creates new entity: User
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     * @param entityUser JSON object with the entity (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> entitiesUserPostWithHttpInfo(EntityUser entityUser) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserPostValidateBeforeCall(entityUser, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new entity: User (asynchronously)
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     * @param entityUser JSON object with the entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserPostAsync(EntityUser entityUser, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserPostValidateBeforeCall(entityUser, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesUserSearchGet
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserSearchGetCall(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/User/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (returnCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnCount", returnCount));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (dynamicAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dynamicAttributes", dynamicAttributes));
        }

        if (returnNulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnNulls", returnNulls));
        }

        if (fetchPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPlan", fetchPlan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserSearchGetValidateBeforeCall(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling entitiesUserSearchGet(Async)");
        }

        return entitiesUserSearchGetCall(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);

    }

    /**
     * Find entities by filter conditions: User
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return List&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityUser> entitiesUserSearchGet(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        ApiResponse<List<EntityUser>> localVarResp = entitiesUserSearchGetWithHttpInfo(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        return localVarResp.getData();
    }

    /**
     * Find entities by filter conditions: User
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return ApiResponse&lt;List&lt;EntityUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityUser>> entitiesUserSearchGetWithHttpInfo(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserSearchGetValidateBeforeCall(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, null);
        Type localVarReturnType = new TypeToken<List<EntityUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find entities by filter conditions: User (asynchronously)
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserSearchGetAsync(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback<List<EntityUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserSearchGetValidateBeforeCall(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);
        Type localVarReturnType = new TypeToken<List<EntityUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesUserSearchPost
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserSearchPostCall(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entitiesDynatCategorySearchPostRequest;

        // create path and map variables
        String localVarPath = "/entities/User/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesUserSearchPostValidateBeforeCall(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entitiesDynatCategorySearchPostRequest' is set
        if (entitiesDynatCategorySearchPostRequest == null) {
            throw new ApiException("Missing the required parameter 'entitiesDynatCategorySearchPostRequest' when calling entitiesUserSearchPost(Async)");
        }

        return entitiesUserSearchPostCall(entitiesDynatCategorySearchPostRequest, _callback);

    }

    /**
     * Find entities by filter conditions: User
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @return List&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityUser> entitiesUserSearchPost(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest) throws ApiException {
        ApiResponse<List<EntityUser>> localVarResp = entitiesUserSearchPostWithHttpInfo(entitiesDynatCategorySearchPostRequest);
        return localVarResp.getData();
    }

    /**
     * Find entities by filter conditions: User
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @return ApiResponse&lt;List&lt;EntityUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityUser>> entitiesUserSearchPostWithHttpInfo(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest) throws ApiException {
        okhttp3.Call localVarCall = entitiesUserSearchPostValidateBeforeCall(entitiesDynatCategorySearchPostRequest, null);
        Type localVarReturnType = new TypeToken<List<EntityUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find entities by filter conditions: User (asynchronously)
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesUserSearchPostAsync(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest, final ApiCallback<List<EntityUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesUserSearchPostValidateBeforeCall(entitiesDynatCategorySearchPostRequest, _callback);
        Type localVarReturnType = new TypeToken<List<EntityUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

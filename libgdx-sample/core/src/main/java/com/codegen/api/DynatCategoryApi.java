/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.api;

import com.codegen.ApiCallback;
import com.codegen.ApiClient;
import com.codegen.ApiException;
import com.codegen.ApiResponse;
import com.codegen.Configuration;
import com.codegen.Pair;
import com.codegen.ProgressRequestBody;
import com.codegen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.codegen.models.EntitiesDynatCategorySearchPostRequest;
import com.codegen.models.EntityDynatCategory;
import com.codegen.models.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DynatCategoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DynatCategoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DynatCategoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for entitiesDynatCategoryEntityIdDelete
     * @param entityId Entity identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryEntityIdDeleteCall(String entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategoryEntityIdDeleteValidateBeforeCall(String entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entitiesDynatCategoryEntityIdDelete(Async)");
        }

        return entitiesDynatCategoryEntityIdDeleteCall(entityId, _callback);

    }

    /**
     * Deletes the entity: dynat_Category
     * 
     * @param entityId Entity identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public void entitiesDynatCategoryEntityIdDelete(String entityId) throws ApiException {
        entitiesDynatCategoryEntityIdDeleteWithHttpInfo(entityId);
    }

    /**
     * Deletes the entity: dynat_Category
     * 
     * @param entityId Entity identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entitiesDynatCategoryEntityIdDeleteWithHttpInfo(String entityId) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategoryEntityIdDeleteValidateBeforeCall(entityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the entity: dynat_Category (asynchronously)
     * 
     * @param entityId Entity identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entity was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to delete the entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryEntityIdDeleteAsync(String entityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategoryEntityIdDeleteValidateBeforeCall(entityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesDynatCategoryEntityIdGet
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryEntityIdGetCall(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dynamicAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dynamicAttributes", dynamicAttributes));
        }

        if (returnNulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnNulls", returnNulls));
        }

        if (fetchPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPlan", fetchPlan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategoryEntityIdGetValidateBeforeCall(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entitiesDynatCategoryEntityIdGet(Async)");
        }

        return entitiesDynatCategoryEntityIdGetCall(entityId, dynamicAttributes, returnNulls, fetchPlan, _callback);

    }

    /**
     * Gets a single entity by identifier: dynat_Category
     * Gets a single entity by identifier
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return EntityDynatCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public EntityDynatCategory entitiesDynatCategoryEntityIdGet(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        ApiResponse<EntityDynatCategory> localVarResp = entitiesDynatCategoryEntityIdGetWithHttpInfo(entityId, dynamicAttributes, returnNulls, fetchPlan);
        return localVarResp.getData();
    }

    /**
     * Gets a single entity by identifier: dynat_Category
     * Gets a single entity by identifier
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return ApiResponse&lt;EntityDynatCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityDynatCategory> entitiesDynatCategoryEntityIdGetWithHttpInfo(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategoryEntityIdGetValidateBeforeCall(entityId, dynamicAttributes, returnNulls, fetchPlan, null);
        Type localVarReturnType = new TypeToken<EntityDynatCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a single entity by identifier: dynat_Category (asynchronously)
     * Gets a single entity by identifier
     * @param entityId Entity identifier (required)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryEntityIdGetAsync(String entityId, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback<EntityDynatCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategoryEntityIdGetValidateBeforeCall(entityId, dynamicAttributes, returnNulls, fetchPlan, _callback);
        Type localVarReturnType = new TypeToken<EntityDynatCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesDynatCategoryEntityIdPut
     * @param entityId Entity identifier (required)
     * @param entityDynatCategory JSON object with the entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryEntityIdPutCall(String entityId, EntityDynatCategory entityDynatCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityDynatCategory;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategoryEntityIdPutValidateBeforeCall(String entityId, EntityDynatCategory entityDynatCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entitiesDynatCategoryEntityIdPut(Async)");
        }

        // verify the required parameter 'entityDynatCategory' is set
        if (entityDynatCategory == null) {
            throw new ApiException("Missing the required parameter 'entityDynatCategory' when calling entitiesDynatCategoryEntityIdPut(Async)");
        }

        return entitiesDynatCategoryEntityIdPutCall(entityId, entityDynatCategory, _callback);

    }

    /**
     * Updates the entity: dynat_Category
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     * @param entityId Entity identifier (required)
     * @param entityDynatCategory JSON object with the entity (required)
     * @return EntityDynatCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public EntityDynatCategory entitiesDynatCategoryEntityIdPut(String entityId, EntityDynatCategory entityDynatCategory) throws ApiException {
        ApiResponse<EntityDynatCategory> localVarResp = entitiesDynatCategoryEntityIdPutWithHttpInfo(entityId, entityDynatCategory);
        return localVarResp.getData();
    }

    /**
     * Updates the entity: dynat_Category
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     * @param entityId Entity identifier (required)
     * @param entityDynatCategory JSON object with the entity (required)
     * @return ApiResponse&lt;EntityDynatCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityDynatCategory> entitiesDynatCategoryEntityIdPutWithHttpInfo(String entityId, EntityDynatCategory entityDynatCategory) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategoryEntityIdPutValidateBeforeCall(entityId, entityDynatCategory, null);
        Type localVarReturnType = new TypeToken<EntityDynatCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the entity: dynat_Category (asynchronously)
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     * @param entityId Entity identifier (required)
     * @param entityDynatCategory JSON object with the entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The updated entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to update the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryEntityIdPutAsync(String entityId, EntityDynatCategory entityDynatCategory, final ApiCallback<EntityDynatCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategoryEntityIdPutValidateBeforeCall(entityId, entityDynatCategory, _callback);
        Type localVarReturnType = new TypeToken<EntityDynatCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesDynatCategoryGet
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryGetCall(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnCount", returnCount));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (dynamicAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dynamicAttributes", dynamicAttributes));
        }

        if (returnNulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnNulls", returnNulls));
        }

        if (fetchPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPlan", fetchPlan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategoryGetValidateBeforeCall(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        return entitiesDynatCategoryGetCall(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);

    }

    /**
     * Gets a list of entities: dynat_Category
     * Gets a list of entities
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return List&lt;EntityDynatCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityDynatCategory> entitiesDynatCategoryGet(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        ApiResponse<List<EntityDynatCategory>> localVarResp = entitiesDynatCategoryGetWithHttpInfo(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        return localVarResp.getData();
    }

    /**
     * Gets a list of entities: dynat_Category
     * Gets a list of entities
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return ApiResponse&lt;List&lt;EntityDynatCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityDynatCategory>> entitiesDynatCategoryGetWithHttpInfo(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategoryGetValidateBeforeCall(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, null);
        Type localVarReturnType = new TypeToken<List<EntityDynatCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of entities: dynat_Category (asynchronously)
     * Gets a list of entities
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The list of entities is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryGetAsync(Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback<List<EntityDynatCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategoryGetValidateBeforeCall(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);
        Type localVarReturnType = new TypeToken<List<EntityDynatCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesDynatCategoryPost
     * @param entityDynatCategory JSON object with the entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryPostCall(EntityDynatCategory entityDynatCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityDynatCategory;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategoryPostValidateBeforeCall(EntityDynatCategory entityDynatCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityDynatCategory' is set
        if (entityDynatCategory == null) {
            throw new ApiException("Missing the required parameter 'entityDynatCategory' when calling entitiesDynatCategoryPost(Async)");
        }

        return entitiesDynatCategoryPostCall(entityDynatCategory, _callback);

    }

    /**
     * Creates new entity: dynat_Category
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     * @param entityDynatCategory JSON object with the entity (required)
     * @return EntityDynatCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public EntityDynatCategory entitiesDynatCategoryPost(EntityDynatCategory entityDynatCategory) throws ApiException {
        ApiResponse<EntityDynatCategory> localVarResp = entitiesDynatCategoryPostWithHttpInfo(entityDynatCategory);
        return localVarResp.getData();
    }

    /**
     * Creates new entity: dynat_Category
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     * @param entityDynatCategory JSON object with the entity (required)
     * @return ApiResponse&lt;EntityDynatCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityDynatCategory> entitiesDynatCategoryPostWithHttpInfo(EntityDynatCategory entityDynatCategory) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategoryPostValidateBeforeCall(entityDynatCategory, null);
        Type localVarReturnType = new TypeToken<EntityDynatCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new entity: dynat_Category (asynchronously)
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     * @param entityDynatCategory JSON object with the entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Entity created. The created entity is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the entity may have a reference to the non-existing entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to create the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategoryPostAsync(EntityDynatCategory entityDynatCategory, final ApiCallback<EntityDynatCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategoryPostValidateBeforeCall(entityDynatCategory, _callback);
        Type localVarReturnType = new TypeToken<EntityDynatCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesDynatCategorySearchGet
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategorySearchGetCall(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (returnCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnCount", returnCount));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (dynamicAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dynamicAttributes", dynamicAttributes));
        }

        if (returnNulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnNulls", returnNulls));
        }

        if (fetchPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPlan", fetchPlan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategorySearchGetValidateBeforeCall(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling entitiesDynatCategorySearchGet(Async)");
        }

        return entitiesDynatCategorySearchGetCall(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);

    }

    /**
     * Find entities by filter conditions: dynat_Category
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return List&lt;EntityDynatCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityDynatCategory> entitiesDynatCategorySearchGet(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        ApiResponse<List<EntityDynatCategory>> localVarResp = entitiesDynatCategorySearchGetWithHttpInfo(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        return localVarResp.getData();
    }

    /**
     * Find entities by filter conditions: dynat_Category
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @return ApiResponse&lt;List&lt;EntityDynatCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityDynatCategory>> entitiesDynatCategorySearchGetWithHttpInfo(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategorySearchGetValidateBeforeCall(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, null);
        Type localVarReturnType = new TypeToken<List<EntityDynatCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find entities by filter conditions: dynat_Category (asynchronously)
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     * @param filter  (required)
     * @param returnCount Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header. (optional)
     * @param offset Position of the first result to retrieve. (optional)
     * @param limit Number of extracted entities. (optional)
     * @param sort Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used. (optional)
     * @param dynamicAttributes Specifies whether entity dynamic attributes should be returned. (optional)
     * @param returnNulls Specifies whether null fields will be written to the result JSON. (optional)
     * @param fetchPlan Name of the fetchPlan which is used for loading the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategorySearchGetAsync(String filter, Boolean returnCount, String offset, String limit, String sort, Boolean dynamicAttributes, Boolean returnNulls, String fetchPlan, final ApiCallback<List<EntityDynatCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategorySearchGetValidateBeforeCall(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan, _callback);
        Type localVarReturnType = new TypeToken<List<EntityDynatCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesDynatCategorySearchPost
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategorySearchPostCall(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entitiesDynatCategorySearchPostRequest;

        // create path and map variables
        String localVarPath = "/entities/dynat_Category/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesDynatCategorySearchPostValidateBeforeCall(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entitiesDynatCategorySearchPostRequest' is set
        if (entitiesDynatCategorySearchPostRequest == null) {
            throw new ApiException("Missing the required parameter 'entitiesDynatCategorySearchPostRequest' when calling entitiesDynatCategorySearchPost(Async)");
        }

        return entitiesDynatCategorySearchPostCall(entitiesDynatCategorySearchPostRequest, _callback);

    }

    /**
     * Find entities by filter conditions: dynat_Category
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @return List&lt;EntityDynatCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityDynatCategory> entitiesDynatCategorySearchPost(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest) throws ApiException {
        ApiResponse<List<EntityDynatCategory>> localVarResp = entitiesDynatCategorySearchPostWithHttpInfo(entitiesDynatCategorySearchPostRequest);
        return localVarResp.getData();
    }

    /**
     * Find entities by filter conditions: dynat_Category
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @return ApiResponse&lt;List&lt;EntityDynatCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityDynatCategory>> entitiesDynatCategorySearchPostWithHttpInfo(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest) throws ApiException {
        okhttp3.Call localVarCall = entitiesDynatCategorySearchPostValidateBeforeCall(entitiesDynatCategorySearchPostRequest, null);
        Type localVarReturnType = new TypeToken<List<EntityDynatCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find entities by filter conditions: dynat_Category (asynchronously)
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     * @param entitiesDynatCategorySearchPostRequest JSON with search parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Entities that conforms filter conditions are returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. For example, the condition value cannot be parsed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to read the entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. MetaClass for the entity with the given name not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesDynatCategorySearchPostAsync(EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest, final ApiCallback<List<EntityDynatCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesDynatCategorySearchPostValidateBeforeCall(entitiesDynatCategorySearchPostRequest, _callback);
        Type localVarReturnType = new TypeToken<List<EntityDynatCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

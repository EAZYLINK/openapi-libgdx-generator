/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.api;

import com.codegen.ApiCallback;
import com.codegen.ApiClient;
import com.codegen.ApiException;
import com.codegen.ApiResponse;
import com.codegen.Configuration;
import com.codegen.Pair;
import com.codegen.ProgressRequestBody;
import com.codegen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.codegen.models.EntityUser;
import com.codegen.models.Error;
import com.codegen.models.ServicesAuthenticationAddUsernamePasswordPostRequest;
import com.codegen.models.ServicesAuthenticationLoginWithCustomIdPostRequest;
import com.codegen.models.ServicesAuthenticationLoginWithEmailPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicesAuthenticationAddUsernamePasswordGet
     * @param user  (required)
     * @param username  (required)
     * @param email  (required)
     * @param password  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationAddUsernamePasswordGetCall(String user, String username, String email, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/authentication/addUsernamePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationAddUsernamePasswordGetValidateBeforeCall(String user, String username, String email, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling servicesAuthenticationAddUsernamePasswordGet(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling servicesAuthenticationAddUsernamePasswordGet(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling servicesAuthenticationAddUsernamePasswordGet(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling servicesAuthenticationAddUsernamePasswordGet(Async)");
        }

        return servicesAuthenticationAddUsernamePasswordGetCall(user, username, email, password, _callback);

    }

    /**
     * authentication#addUsernamePassword
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param user  (required)
     * @param username  (required)
     * @param email  (required)
     * @param password  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public String servicesAuthenticationAddUsernamePasswordGet(String user, String username, String email, String password) throws ApiException {
        ApiResponse<String> localVarResp = servicesAuthenticationAddUsernamePasswordGetWithHttpInfo(user, username, email, password);
        return localVarResp.getData();
    }

    /**
     * authentication#addUsernamePassword
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param user  (required)
     * @param username  (required)
     * @param email  (required)
     * @param password  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> servicesAuthenticationAddUsernamePasswordGetWithHttpInfo(String user, String username, String email, String password) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationAddUsernamePasswordGetValidateBeforeCall(user, username, email, password, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#addUsernamePassword (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param user  (required)
     * @param username  (required)
     * @param email  (required)
     * @param password  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationAddUsernamePasswordGetAsync(String user, String username, String email, String password, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationAddUsernamePasswordGetValidateBeforeCall(user, username, email, password, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationAddUsernamePasswordPost
     * @param servicesAuthenticationAddUsernamePasswordPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationAddUsernamePasswordPostCall(ServicesAuthenticationAddUsernamePasswordPostRequest servicesAuthenticationAddUsernamePasswordPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = servicesAuthenticationAddUsernamePasswordPostRequest;

        // create path and map variables
        String localVarPath = "/services/authentication/addUsernamePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationAddUsernamePasswordPostValidateBeforeCall(ServicesAuthenticationAddUsernamePasswordPostRequest servicesAuthenticationAddUsernamePasswordPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'servicesAuthenticationAddUsernamePasswordPostRequest' is set
        if (servicesAuthenticationAddUsernamePasswordPostRequest == null) {
            throw new ApiException("Missing the required parameter 'servicesAuthenticationAddUsernamePasswordPostRequest' when calling servicesAuthenticationAddUsernamePasswordPost(Async)");
        }

        return servicesAuthenticationAddUsernamePasswordPostCall(servicesAuthenticationAddUsernamePasswordPostRequest, _callback);

    }

    /**
     * authentication#addUsernamePassword
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationAddUsernamePasswordPostRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public String servicesAuthenticationAddUsernamePasswordPost(ServicesAuthenticationAddUsernamePasswordPostRequest servicesAuthenticationAddUsernamePasswordPostRequest) throws ApiException {
        ApiResponse<String> localVarResp = servicesAuthenticationAddUsernamePasswordPostWithHttpInfo(servicesAuthenticationAddUsernamePasswordPostRequest);
        return localVarResp.getData();
    }

    /**
     * authentication#addUsernamePassword
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationAddUsernamePasswordPostRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> servicesAuthenticationAddUsernamePasswordPostWithHttpInfo(ServicesAuthenticationAddUsernamePasswordPostRequest servicesAuthenticationAddUsernamePasswordPostRequest) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationAddUsernamePasswordPostValidateBeforeCall(servicesAuthenticationAddUsernamePasswordPostRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#addUsernamePassword (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationAddUsernamePasswordPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationAddUsernamePasswordPostAsync(ServicesAuthenticationAddUsernamePasswordPostRequest servicesAuthenticationAddUsernamePasswordPostRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationAddUsernamePasswordPostValidateBeforeCall(servicesAuthenticationAddUsernamePasswordPostRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationLoginAnonymouslyGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginAnonymouslyGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/authentication/loginAnonymously";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationLoginAnonymouslyGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return servicesAuthenticationLoginAnonymouslyGetCall(_callback);

    }

    /**
     * authentication#loginAnonymously
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser servicesAuthenticationLoginAnonymouslyGet() throws ApiException {
        ApiResponse<EntityUser> localVarResp = servicesAuthenticationLoginAnonymouslyGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * authentication#loginAnonymously
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> servicesAuthenticationLoginAnonymouslyGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationLoginAnonymouslyGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#loginAnonymously (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginAnonymouslyGetAsync(final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationLoginAnonymouslyGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationLoginAnonymouslyPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginAnonymouslyPostCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/services/authentication/loginAnonymously";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationLoginAnonymouslyPostValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling servicesAuthenticationLoginAnonymouslyPost(Async)");
        }

        return servicesAuthenticationLoginAnonymouslyPostCall(body, _callback);

    }

    /**
     * authentication#loginAnonymously
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param body  (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser servicesAuthenticationLoginAnonymouslyPost(Object body) throws ApiException {
        ApiResponse<EntityUser> localVarResp = servicesAuthenticationLoginAnonymouslyPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * authentication#loginAnonymously
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param body  (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> servicesAuthenticationLoginAnonymouslyPostWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationLoginAnonymouslyPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#loginAnonymously (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginAnonymouslyPostAsync(Object body, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationLoginAnonymouslyPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationLoginWithCustomIdGet
     * @param customId  (required)
     * @param createIfNotExists  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithCustomIdGetCall(String customId, String createIfNotExists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/authentication/loginWithCustomId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customId", customId));
        }

        if (createIfNotExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createIfNotExists", createIfNotExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationLoginWithCustomIdGetValidateBeforeCall(String customId, String createIfNotExists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customId' is set
        if (customId == null) {
            throw new ApiException("Missing the required parameter 'customId' when calling servicesAuthenticationLoginWithCustomIdGet(Async)");
        }

        // verify the required parameter 'createIfNotExists' is set
        if (createIfNotExists == null) {
            throw new ApiException("Missing the required parameter 'createIfNotExists' when calling servicesAuthenticationLoginWithCustomIdGet(Async)");
        }

        return servicesAuthenticationLoginWithCustomIdGetCall(customId, createIfNotExists, _callback);

    }

    /**
     * authentication#loginWithCustomId
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param customId  (required)
     * @param createIfNotExists  (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser servicesAuthenticationLoginWithCustomIdGet(String customId, String createIfNotExists) throws ApiException {
        ApiResponse<EntityUser> localVarResp = servicesAuthenticationLoginWithCustomIdGetWithHttpInfo(customId, createIfNotExists);
        return localVarResp.getData();
    }

    /**
     * authentication#loginWithCustomId
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param customId  (required)
     * @param createIfNotExists  (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> servicesAuthenticationLoginWithCustomIdGetWithHttpInfo(String customId, String createIfNotExists) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationLoginWithCustomIdGetValidateBeforeCall(customId, createIfNotExists, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#loginWithCustomId (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param customId  (required)
     * @param createIfNotExists  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithCustomIdGetAsync(String customId, String createIfNotExists, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationLoginWithCustomIdGetValidateBeforeCall(customId, createIfNotExists, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationLoginWithCustomIdPost
     * @param servicesAuthenticationLoginWithCustomIdPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithCustomIdPostCall(ServicesAuthenticationLoginWithCustomIdPostRequest servicesAuthenticationLoginWithCustomIdPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = servicesAuthenticationLoginWithCustomIdPostRequest;

        // create path and map variables
        String localVarPath = "/services/authentication/loginWithCustomId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationLoginWithCustomIdPostValidateBeforeCall(ServicesAuthenticationLoginWithCustomIdPostRequest servicesAuthenticationLoginWithCustomIdPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'servicesAuthenticationLoginWithCustomIdPostRequest' is set
        if (servicesAuthenticationLoginWithCustomIdPostRequest == null) {
            throw new ApiException("Missing the required parameter 'servicesAuthenticationLoginWithCustomIdPostRequest' when calling servicesAuthenticationLoginWithCustomIdPost(Async)");
        }

        return servicesAuthenticationLoginWithCustomIdPostCall(servicesAuthenticationLoginWithCustomIdPostRequest, _callback);

    }

    /**
     * authentication#loginWithCustomId
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationLoginWithCustomIdPostRequest  (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser servicesAuthenticationLoginWithCustomIdPost(ServicesAuthenticationLoginWithCustomIdPostRequest servicesAuthenticationLoginWithCustomIdPostRequest) throws ApiException {
        ApiResponse<EntityUser> localVarResp = servicesAuthenticationLoginWithCustomIdPostWithHttpInfo(servicesAuthenticationLoginWithCustomIdPostRequest);
        return localVarResp.getData();
    }

    /**
     * authentication#loginWithCustomId
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationLoginWithCustomIdPostRequest  (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> servicesAuthenticationLoginWithCustomIdPostWithHttpInfo(ServicesAuthenticationLoginWithCustomIdPostRequest servicesAuthenticationLoginWithCustomIdPostRequest) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationLoginWithCustomIdPostValidateBeforeCall(servicesAuthenticationLoginWithCustomIdPostRequest, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#loginWithCustomId (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationLoginWithCustomIdPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithCustomIdPostAsync(ServicesAuthenticationLoginWithCustomIdPostRequest servicesAuthenticationLoginWithCustomIdPostRequest, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationLoginWithCustomIdPostValidateBeforeCall(servicesAuthenticationLoginWithCustomIdPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationLoginWithEmailGet
     * @param email  (required)
     * @param password  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithEmailGetCall(String email, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/authentication/loginWithEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationLoginWithEmailGetValidateBeforeCall(String email, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling servicesAuthenticationLoginWithEmailGet(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling servicesAuthenticationLoginWithEmailGet(Async)");
        }

        return servicesAuthenticationLoginWithEmailGetCall(email, password, _callback);

    }

    /**
     * authentication#loginWithEmail
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param email  (required)
     * @param password  (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser servicesAuthenticationLoginWithEmailGet(String email, String password) throws ApiException {
        ApiResponse<EntityUser> localVarResp = servicesAuthenticationLoginWithEmailGetWithHttpInfo(email, password);
        return localVarResp.getData();
    }

    /**
     * authentication#loginWithEmail
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param email  (required)
     * @param password  (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> servicesAuthenticationLoginWithEmailGetWithHttpInfo(String email, String password) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationLoginWithEmailGetValidateBeforeCall(email, password, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#loginWithEmail (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param email  (required)
     * @param password  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithEmailGetAsync(String email, String password, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationLoginWithEmailGetValidateBeforeCall(email, password, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAuthenticationLoginWithEmailPost
     * @param servicesAuthenticationLoginWithEmailPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithEmailPostCall(ServicesAuthenticationLoginWithEmailPostRequest servicesAuthenticationLoginWithEmailPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = servicesAuthenticationLoginWithEmailPostRequest;

        // create path and map variables
        String localVarPath = "/services/authentication/loginWithEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAuthenticationLoginWithEmailPostValidateBeforeCall(ServicesAuthenticationLoginWithEmailPostRequest servicesAuthenticationLoginWithEmailPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'servicesAuthenticationLoginWithEmailPostRequest' is set
        if (servicesAuthenticationLoginWithEmailPostRequest == null) {
            throw new ApiException("Missing the required parameter 'servicesAuthenticationLoginWithEmailPostRequest' when calling servicesAuthenticationLoginWithEmailPost(Async)");
        }

        return servicesAuthenticationLoginWithEmailPostCall(servicesAuthenticationLoginWithEmailPostRequest, _callback);

    }

    /**
     * authentication#loginWithEmail
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationLoginWithEmailPostRequest  (required)
     * @return EntityUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public EntityUser servicesAuthenticationLoginWithEmailPost(ServicesAuthenticationLoginWithEmailPostRequest servicesAuthenticationLoginWithEmailPostRequest) throws ApiException {
        ApiResponse<EntityUser> localVarResp = servicesAuthenticationLoginWithEmailPostWithHttpInfo(servicesAuthenticationLoginWithEmailPostRequest);
        return localVarResp.getData();
    }

    /**
     * authentication#loginWithEmail
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationLoginWithEmailPostRequest  (required)
     * @return ApiResponse&lt;EntityUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUser> servicesAuthenticationLoginWithEmailPostWithHttpInfo(ServicesAuthenticationLoginWithEmailPostRequest servicesAuthenticationLoginWithEmailPostRequest) throws ApiException {
        okhttp3.Call localVarCall = servicesAuthenticationLoginWithEmailPostValidateBeforeCall(servicesAuthenticationLoginWithEmailPostRequest, null);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * authentication#loginWithEmail (asynchronously)
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     * @param servicesAuthenticationLoginWithEmailPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the result of the method execution. It can be of simple datatype as well as JSON that represents an entity or entities collection. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. This status is returned when the service method was executed successfully but returns null or is of void type. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The user doesn&#39;t have permissions to invoke the service method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAuthenticationLoginWithEmailPostAsync(ServicesAuthenticationLoginWithEmailPostRequest servicesAuthenticationLoginWithEmailPostRequest, final ApiCallback<EntityUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAuthenticationLoginWithEmailPostValidateBeforeCall(servicesAuthenticationLoginWithEmailPostRequest, _callback);
        Type localVarReturnType = new TypeToken<EntityUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

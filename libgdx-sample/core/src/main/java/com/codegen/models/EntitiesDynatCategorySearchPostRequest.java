/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.codegen.JSON;

/**
 * EntitiesDynatCategorySearchPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T10:31:41.453768600+01:00[Africa/Lagos]")
public class EntitiesDynatCategorySearchPostRequest {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_DYNAMIC_ATTRIBUTES = "dynamicAttributes";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_ATTRIBUTES)
  private Boolean dynamicAttributes;

  public static final String SERIALIZED_NAME_RETURN_COUNT = "returnCount";
  @SerializedName(SERIALIZED_NAME_RETURN_COUNT)
  private Boolean returnCount;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_RETURN_NULLS = "returnNulls";
  @SerializedName(SERIALIZED_NAME_RETURN_NULLS)
  private Boolean returnNulls;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort;

  public static final String SERIALIZED_NAME_FETCH_PLAN = "fetchPlan";
  @SerializedName(SERIALIZED_NAME_FETCH_PLAN)
  private String fetchPlan;

  public EntitiesDynatCategorySearchPostRequest() {
  }

  public EntitiesDynatCategorySearchPostRequest filter(String filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * JSON with filter definition
   * @return filter
  **/
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }


  public EntitiesDynatCategorySearchPostRequest dynamicAttributes(Boolean dynamicAttributes) {
    
    this.dynamicAttributes = dynamicAttributes;
    return this;
  }

   /**
   * Specifies whether entity dynamic attributes should be returned.
   * @return dynamicAttributes
  **/
  @javax.annotation.Nullable
  public Boolean getDynamicAttributes() {
    return dynamicAttributes;
  }


  public void setDynamicAttributes(Boolean dynamicAttributes) {
    this.dynamicAttributes = dynamicAttributes;
  }


  public EntitiesDynatCategorySearchPostRequest returnCount(Boolean returnCount) {
    
    this.returnCount = returnCount;
    return this;
  }

   /**
   * Specifies whether the total count of entities should be returned in the &#39;X-Total-Count&#39; header.
   * @return returnCount
  **/
  @javax.annotation.Nullable
  public Boolean getReturnCount() {
    return returnCount;
  }


  public void setReturnCount(Boolean returnCount) {
    this.returnCount = returnCount;
  }


  public EntitiesDynatCategorySearchPostRequest offset(String offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Position of the first result to retrieve.
   * @return offset
  **/
  @javax.annotation.Nullable
  public String getOffset() {
    return offset;
  }


  public void setOffset(String offset) {
    this.offset = offset;
  }


  public EntitiesDynatCategorySearchPostRequest returnNulls(Boolean returnNulls) {
    
    this.returnNulls = returnNulls;
    return this;
  }

   /**
   * Specifies whether null fields will be written to the result JSON.
   * @return returnNulls
  **/
  @javax.annotation.Nullable
  public Boolean getReturnNulls() {
    return returnNulls;
  }


  public void setReturnNulls(Boolean returnNulls) {
    this.returnNulls = returnNulls;
  }


  public EntitiesDynatCategorySearchPostRequest limit(String limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Number of extracted entities.
   * @return limit
  **/
  @javax.annotation.Nullable
  public String getLimit() {
    return limit;
  }


  public void setLimit(String limit) {
    this.limit = limit;
  }


  public EntitiesDynatCategorySearchPostRequest sort(String sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Name of the field to be sorted by. If the name is preceding by the &#39;+&#39; character, then the sort order is ascending, if by the &#39;-&#39; character then descending. If there is no special character before the property name, then ascending sort will be used.
   * @return sort
  **/
  @javax.annotation.Nullable
  public String getSort() {
    return sort;
  }


  public void setSort(String sort) {
    this.sort = sort;
  }


  public EntitiesDynatCategorySearchPostRequest fetchPlan(String fetchPlan) {
    
    this.fetchPlan = fetchPlan;
    return this;
  }

   /**
   * Name of the fetchPlan which is used for loading the entity.
   * @return fetchPlan
  **/
  @javax.annotation.Nullable
  public String getFetchPlan() {
    return fetchPlan;
  }


  public void setFetchPlan(String fetchPlan) {
    this.fetchPlan = fetchPlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest = (EntitiesDynatCategorySearchPostRequest) o;
    return Objects.equals(this.filter, entitiesDynatCategorySearchPostRequest.filter) &&
        Objects.equals(this.dynamicAttributes, entitiesDynatCategorySearchPostRequest.dynamicAttributes) &&
        Objects.equals(this.returnCount, entitiesDynatCategorySearchPostRequest.returnCount) &&
        Objects.equals(this.offset, entitiesDynatCategorySearchPostRequest.offset) &&
        Objects.equals(this.returnNulls, entitiesDynatCategorySearchPostRequest.returnNulls) &&
        Objects.equals(this.limit, entitiesDynatCategorySearchPostRequest.limit) &&
        Objects.equals(this.sort, entitiesDynatCategorySearchPostRequest.sort) &&
        Objects.equals(this.fetchPlan, entitiesDynatCategorySearchPostRequest.fetchPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, dynamicAttributes, returnCount, offset, returnNulls, limit, sort, fetchPlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitiesDynatCategorySearchPostRequest {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    dynamicAttributes: ").append(toIndentedString(dynamicAttributes)).append("\n");
    sb.append("    returnCount: ").append(toIndentedString(returnCount)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    returnNulls: ").append(toIndentedString(returnNulls)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    fetchPlan: ").append(toIndentedString(fetchPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("dynamicAttributes");
    openapiFields.add("returnCount");
    openapiFields.add("offset");
    openapiFields.add("returnNulls");
    openapiFields.add("limit");
    openapiFields.add("sort");
    openapiFields.add("fetchPlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EntitiesDynatCategorySearchPostRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EntitiesDynatCategorySearchPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntitiesDynatCategorySearchPostRequest is not found in the empty JSON string", EntitiesDynatCategorySearchPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EntitiesDynatCategorySearchPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntitiesDynatCategorySearchPostRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) && !jsonObj.get("offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offset").toString()));
      }
      if ((jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) && !jsonObj.get("limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      if ((jsonObj.get("fetchPlan") != null && !jsonObj.get("fetchPlan").isJsonNull()) && !jsonObj.get("fetchPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetchPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fetchPlan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntitiesDynatCategorySearchPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntitiesDynatCategorySearchPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntitiesDynatCategorySearchPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntitiesDynatCategorySearchPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EntitiesDynatCategorySearchPostRequest>() {
           @Override
           public void write(JsonWriter out, EntitiesDynatCategorySearchPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntitiesDynatCategorySearchPostRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntitiesDynatCategorySearchPostRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntitiesDynatCategorySearchPostRequest
  * @throws IOException if the JSON string is invalid with respect to EntitiesDynatCategorySearchPostRequest
  */
  public static EntitiesDynatCategorySearchPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntitiesDynatCategorySearchPostRequest.class);
  }

 /**
  * Convert an instance of EntitiesDynatCategorySearchPostRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


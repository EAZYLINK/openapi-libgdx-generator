/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.codegen.JSON;

/**
 * EntityDynatCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T10:31:41.453768600+01:00[Africa/Lagos]")
public class EntityDynatCategory {
  public static final String SERIALIZED_NAME_ENTITY_NAME = "_entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName = "dynat_Category";

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "_instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName = "name,localeNames";

  public static final String SERIALIZED_NAME_LOCALE_NAMES = "localeNames";
  @SerializedName(SERIALIZED_NAME_LOCALE_NAMES)
  private String localeNames;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_DELETED_BY = "deletedBy";
  @SerializedName(SERIALIZED_NAME_DELETED_BY)
  private String deletedBy;

  public static final String SERIALIZED_NAME_SPECIAL = "special";
  @SerializedName(SERIALIZED_NAME_SPECIAL)
  private String special;

  public static final String SERIALIZED_NAME_DELETE_TS = "deleteTs";
  @SerializedName(SERIALIZED_NAME_DELETE_TS)
  private OffsetDateTime deleteTs;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CREATE_TS = "createTs";
  @SerializedName(SERIALIZED_NAME_CREATE_TS)
  private OffsetDateTime createTs;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_UPDATE_TS = "updateTs";
  @SerializedName(SERIALIZED_NAME_UPDATE_TS)
  private OffsetDateTime updateTs;

  public EntityDynatCategory() {
  }

  public EntityDynatCategory entityName(String entityName) {
    
    this.entityName = entityName;
    return this;
  }

   /**
   * Get entityName
   * @return entityName
  **/
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }


  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public EntityDynatCategory instanceName(String instanceName) {
    
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }


  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public EntityDynatCategory localeNames(String localeNames) {
    
    this.localeNames = localeNames;
    return this;
  }

   /**
   * Get localeNames
   * @return localeNames
  **/
  @javax.annotation.Nullable
  public String getLocaleNames() {
    return localeNames;
  }


  public void setLocaleNames(String localeNames) {
    this.localeNames = localeNames;
  }


  public EntityDynatCategory updatedBy(String updatedBy) {
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public EntityDynatCategory entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public EntityDynatCategory version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  public EntityDynatCategory deletedBy(String deletedBy) {
    
    this.deletedBy = deletedBy;
    return this;
  }

   /**
   * Get deletedBy
   * @return deletedBy
  **/
  @javax.annotation.Nullable
  public String getDeletedBy() {
    return deletedBy;
  }


  public void setDeletedBy(String deletedBy) {
    this.deletedBy = deletedBy;
  }


  public EntityDynatCategory special(String special) {
    
    this.special = special;
    return this;
  }

   /**
   * Get special
   * @return special
  **/
  @javax.annotation.Nullable
  public String getSpecial() {
    return special;
  }


  public void setSpecial(String special) {
    this.special = special;
  }


  public EntityDynatCategory deleteTs(OffsetDateTime deleteTs) {
    
    this.deleteTs = deleteTs;
    return this;
  }

   /**
   * Get deleteTs
   * @return deleteTs
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDeleteTs() {
    return deleteTs;
  }


  public void setDeleteTs(OffsetDateTime deleteTs) {
    this.deleteTs = deleteTs;
  }


  public EntityDynatCategory isDefault(Boolean isDefault) {
    
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Get isDefault
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public EntityDynatCategory createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public EntityDynatCategory name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EntityDynatCategory createTs(OffsetDateTime createTs) {
    
    this.createTs = createTs;
    return this;
  }

   /**
   * Get createTs
   * @return createTs
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTs() {
    return createTs;
  }


  public void setCreateTs(OffsetDateTime createTs) {
    this.createTs = createTs;
  }


  public EntityDynatCategory id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public EntityDynatCategory updateTs(OffsetDateTime updateTs) {
    
    this.updateTs = updateTs;
    return this;
  }

   /**
   * Get updateTs
   * @return updateTs
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTs() {
    return updateTs;
  }


  public void setUpdateTs(OffsetDateTime updateTs) {
    this.updateTs = updateTs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityDynatCategory entityDynatCategory = (EntityDynatCategory) o;
    return Objects.equals(this.entityName, entityDynatCategory.entityName) &&
        Objects.equals(this.instanceName, entityDynatCategory.instanceName) &&
        Objects.equals(this.localeNames, entityDynatCategory.localeNames) &&
        Objects.equals(this.updatedBy, entityDynatCategory.updatedBy) &&
        Objects.equals(this.entityType, entityDynatCategory.entityType) &&
        Objects.equals(this.version, entityDynatCategory.version) &&
        Objects.equals(this.deletedBy, entityDynatCategory.deletedBy) &&
        Objects.equals(this.special, entityDynatCategory.special) &&
        Objects.equals(this.deleteTs, entityDynatCategory.deleteTs) &&
        Objects.equals(this.isDefault, entityDynatCategory.isDefault) &&
        Objects.equals(this.createdBy, entityDynatCategory.createdBy) &&
        Objects.equals(this.name, entityDynatCategory.name) &&
        Objects.equals(this.createTs, entityDynatCategory.createTs) &&
        Objects.equals(this.id, entityDynatCategory.id) &&
        Objects.equals(this.updateTs, entityDynatCategory.updateTs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityName, instanceName, localeNames, updatedBy, entityType, version, deletedBy, special, deleteTs, isDefault, createdBy, name, createTs, id, updateTs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityDynatCategory {\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    localeNames: ").append(toIndentedString(localeNames)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("    special: ").append(toIndentedString(special)).append("\n");
    sb.append("    deleteTs: ").append(toIndentedString(deleteTs)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createTs: ").append(toIndentedString(createTs)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updateTs: ").append(toIndentedString(updateTs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_entityName");
    openapiFields.add("_instanceName");
    openapiFields.add("localeNames");
    openapiFields.add("updatedBy");
    openapiFields.add("entityType");
    openapiFields.add("version");
    openapiFields.add("deletedBy");
    openapiFields.add("special");
    openapiFields.add("deleteTs");
    openapiFields.add("isDefault");
    openapiFields.add("createdBy");
    openapiFields.add("name");
    openapiFields.add("createTs");
    openapiFields.add("id");
    openapiFields.add("updateTs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EntityDynatCategory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EntityDynatCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityDynatCategory is not found in the empty JSON string", EntityDynatCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EntityDynatCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityDynatCategory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("_entityName") != null && !jsonObj.get("_entityName").isJsonNull()) && !jsonObj.get("_entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_entityName").toString()));
      }
      if ((jsonObj.get("_instanceName") != null && !jsonObj.get("_instanceName").isJsonNull()) && !jsonObj.get("_instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_instanceName").toString()));
      }
      if ((jsonObj.get("localeNames") != null && !jsonObj.get("localeNames").isJsonNull()) && !jsonObj.get("localeNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localeNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localeNames").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("deletedBy") != null && !jsonObj.get("deletedBy").isJsonNull()) && !jsonObj.get("deletedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedBy").toString()));
      }
      if ((jsonObj.get("special") != null && !jsonObj.get("special").isJsonNull()) && !jsonObj.get("special").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityDynatCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityDynatCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityDynatCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityDynatCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityDynatCategory>() {
           @Override
           public void write(JsonWriter out, EntityDynatCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityDynatCategory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntityDynatCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntityDynatCategory
  * @throws IOException if the JSON string is invalid with respect to EntityDynatCategory
  */
  public static EntityDynatCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityDynatCategory.class);
  }

 /**
  * Convert an instance of EntityDynatCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.codegen.JSON;

/**
 * EntityAuditEntitySnapshot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T10:31:41.453768600+01:00[Africa/Lagos]")
public class EntityAuditEntitySnapshot {
  public static final String SERIALIZED_NAME_ENTITY_NAME = "_entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName = "audit_EntitySnapshot";

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "_instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName = "";

  public static final String SERIALIZED_NAME_SNAPSHOT_XML = "snapshotXml";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_XML)
  private String snapshotXml;

  public static final String SERIALIZED_NAME_SNAPSHOT_DATE = "snapshotDate";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_DATE)
  private OffsetDateTime snapshotDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_FETCH_PLAN_XML = "fetchPlanXml";
  @SerializedName(SERIALIZED_NAME_FETCH_PLAN_XML)
  private String fetchPlanXml;

  public static final String SERIALIZED_NAME_ENTITY_META_CLASS = "entityMetaClass";
  @SerializedName(SERIALIZED_NAME_ENTITY_META_CLASS)
  private String entityMetaClass;

  public static final String SERIALIZED_NAME_AUTHOR_USERNAME = "authorUsername";
  @SerializedName(SERIALIZED_NAME_AUTHOR_USERNAME)
  private String authorUsername;

  public static final String SERIALIZED_NAME_SYS_TENANT_ID = "sysTenantId";
  @SerializedName(SERIALIZED_NAME_SYS_TENANT_ID)
  private String sysTenantId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public EntityAuditEntitySnapshot() {
  }

  public EntityAuditEntitySnapshot entityName(String entityName) {
    
    this.entityName = entityName;
    return this;
  }

   /**
   * Get entityName
   * @return entityName
  **/
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }


  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public EntityAuditEntitySnapshot instanceName(String instanceName) {
    
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }


  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public EntityAuditEntitySnapshot snapshotXml(String snapshotXml) {
    
    this.snapshotXml = snapshotXml;
    return this;
  }

   /**
   * Get snapshotXml
   * @return snapshotXml
  **/
  @javax.annotation.Nullable
  public String getSnapshotXml() {
    return snapshotXml;
  }


  public void setSnapshotXml(String snapshotXml) {
    this.snapshotXml = snapshotXml;
  }


  public EntityAuditEntitySnapshot snapshotDate(OffsetDateTime snapshotDate) {
    
    this.snapshotDate = snapshotDate;
    return this;
  }

   /**
   * Get snapshotDate
   * @return snapshotDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSnapshotDate() {
    return snapshotDate;
  }


  public void setSnapshotDate(OffsetDateTime snapshotDate) {
    this.snapshotDate = snapshotDate;
  }


  public EntityAuditEntitySnapshot createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public EntityAuditEntitySnapshot createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public EntityAuditEntitySnapshot fetchPlanXml(String fetchPlanXml) {
    
    this.fetchPlanXml = fetchPlanXml;
    return this;
  }

   /**
   * Get fetchPlanXml
   * @return fetchPlanXml
  **/
  @javax.annotation.Nullable
  public String getFetchPlanXml() {
    return fetchPlanXml;
  }


  public void setFetchPlanXml(String fetchPlanXml) {
    this.fetchPlanXml = fetchPlanXml;
  }


  public EntityAuditEntitySnapshot entityMetaClass(String entityMetaClass) {
    
    this.entityMetaClass = entityMetaClass;
    return this;
  }

   /**
   * Get entityMetaClass
   * @return entityMetaClass
  **/
  @javax.annotation.Nullable
  public String getEntityMetaClass() {
    return entityMetaClass;
  }


  public void setEntityMetaClass(String entityMetaClass) {
    this.entityMetaClass = entityMetaClass;
  }


  public EntityAuditEntitySnapshot authorUsername(String authorUsername) {
    
    this.authorUsername = authorUsername;
    return this;
  }

   /**
   * Get authorUsername
   * @return authorUsername
  **/
  @javax.annotation.Nullable
  public String getAuthorUsername() {
    return authorUsername;
  }


  public void setAuthorUsername(String authorUsername) {
    this.authorUsername = authorUsername;
  }


  public EntityAuditEntitySnapshot sysTenantId(String sysTenantId) {
    
    this.sysTenantId = sysTenantId;
    return this;
  }

   /**
   * Get sysTenantId
   * @return sysTenantId
  **/
  @javax.annotation.Nullable
  public String getSysTenantId() {
    return sysTenantId;
  }


  public void setSysTenantId(String sysTenantId) {
    this.sysTenantId = sysTenantId;
  }


  public EntityAuditEntitySnapshot id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityAuditEntitySnapshot entityAuditEntitySnapshot = (EntityAuditEntitySnapshot) o;
    return Objects.equals(this.entityName, entityAuditEntitySnapshot.entityName) &&
        Objects.equals(this.instanceName, entityAuditEntitySnapshot.instanceName) &&
        Objects.equals(this.snapshotXml, entityAuditEntitySnapshot.snapshotXml) &&
        Objects.equals(this.snapshotDate, entityAuditEntitySnapshot.snapshotDate) &&
        Objects.equals(this.createdDate, entityAuditEntitySnapshot.createdDate) &&
        Objects.equals(this.createdBy, entityAuditEntitySnapshot.createdBy) &&
        Objects.equals(this.fetchPlanXml, entityAuditEntitySnapshot.fetchPlanXml) &&
        Objects.equals(this.entityMetaClass, entityAuditEntitySnapshot.entityMetaClass) &&
        Objects.equals(this.authorUsername, entityAuditEntitySnapshot.authorUsername) &&
        Objects.equals(this.sysTenantId, entityAuditEntitySnapshot.sysTenantId) &&
        Objects.equals(this.id, entityAuditEntitySnapshot.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityName, instanceName, snapshotXml, snapshotDate, createdDate, createdBy, fetchPlanXml, entityMetaClass, authorUsername, sysTenantId, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityAuditEntitySnapshot {\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    snapshotXml: ").append(toIndentedString(snapshotXml)).append("\n");
    sb.append("    snapshotDate: ").append(toIndentedString(snapshotDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    fetchPlanXml: ").append(toIndentedString(fetchPlanXml)).append("\n");
    sb.append("    entityMetaClass: ").append(toIndentedString(entityMetaClass)).append("\n");
    sb.append("    authorUsername: ").append(toIndentedString(authorUsername)).append("\n");
    sb.append("    sysTenantId: ").append(toIndentedString(sysTenantId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_entityName");
    openapiFields.add("_instanceName");
    openapiFields.add("snapshotXml");
    openapiFields.add("snapshotDate");
    openapiFields.add("createdDate");
    openapiFields.add("createdBy");
    openapiFields.add("fetchPlanXml");
    openapiFields.add("entityMetaClass");
    openapiFields.add("authorUsername");
    openapiFields.add("sysTenantId");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EntityAuditEntitySnapshot
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EntityAuditEntitySnapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityAuditEntitySnapshot is not found in the empty JSON string", EntityAuditEntitySnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EntityAuditEntitySnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityAuditEntitySnapshot` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("_entityName") != null && !jsonObj.get("_entityName").isJsonNull()) && !jsonObj.get("_entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_entityName").toString()));
      }
      if ((jsonObj.get("_instanceName") != null && !jsonObj.get("_instanceName").isJsonNull()) && !jsonObj.get("_instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_instanceName").toString()));
      }
      if ((jsonObj.get("snapshotXml") != null && !jsonObj.get("snapshotXml").isJsonNull()) && !jsonObj.get("snapshotXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotXml").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("fetchPlanXml") != null && !jsonObj.get("fetchPlanXml").isJsonNull()) && !jsonObj.get("fetchPlanXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetchPlanXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fetchPlanXml").toString()));
      }
      if ((jsonObj.get("entityMetaClass") != null && !jsonObj.get("entityMetaClass").isJsonNull()) && !jsonObj.get("entityMetaClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityMetaClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityMetaClass").toString()));
      }
      if ((jsonObj.get("authorUsername") != null && !jsonObj.get("authorUsername").isJsonNull()) && !jsonObj.get("authorUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorUsername").toString()));
      }
      if ((jsonObj.get("sysTenantId") != null && !jsonObj.get("sysTenantId").isJsonNull()) && !jsonObj.get("sysTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sysTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sysTenantId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityAuditEntitySnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityAuditEntitySnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityAuditEntitySnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityAuditEntitySnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityAuditEntitySnapshot>() {
           @Override
           public void write(JsonWriter out, EntityAuditEntitySnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityAuditEntitySnapshot read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntityAuditEntitySnapshot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntityAuditEntitySnapshot
  * @throws IOException if the JSON string is invalid with respect to EntityAuditEntitySnapshot
  */
  public static EntityAuditEntitySnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityAuditEntitySnapshot.class);
  }

 /**
  * Convert an instance of EntityAuditEntitySnapshot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


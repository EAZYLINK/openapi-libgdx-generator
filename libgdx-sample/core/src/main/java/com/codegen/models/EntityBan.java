/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.models;

import java.util.Objects;
import java.util.Arrays;
import com.codegen.models.EntityUser;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.codegen.JSON;

/**
 * EntityBan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-29T10:31:41.453768600+01:00[Africa/Lagos]")
public class EntityBan {
  public static final String SERIALIZED_NAME_ENTITY_NAME = "_entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName = "Ban";

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "_instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName = "";

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_DELETED_DATE = "deletedDate";
  @SerializedName(SERIALIZED_NAME_DELETED_DATE)
  private String deletedDate;

  public static final String SERIALIZED_NAME_BANNED_BY = "bannedBy";
  @SerializedName(SERIALIZED_NAME_BANNED_BY)
  private EntityUser bannedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EntityUser user;

  public static final String SERIALIZED_NAME_DELETED_BY = "deletedBy";
  @SerializedName(SERIALIZED_NAME_DELETED_BY)
  private String deletedBy;

  public EntityBan() {
  }

  public EntityBan entityName(String entityName) {
    
    this.entityName = entityName;
    return this;
  }

   /**
   * Get entityName
   * @return entityName
  **/
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }


  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public EntityBan instanceName(String instanceName) {
    
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }


  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public EntityBan reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public EntityBan createdDate(String createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * java.time.OffsetDateTime
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public EntityBan createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public EntityBan lastModifiedDate(String lastModifiedDate) {
    
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * java.time.OffsetDateTime
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }


  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public EntityBan deletedDate(String deletedDate) {
    
    this.deletedDate = deletedDate;
    return this;
  }

   /**
   * java.time.OffsetDateTime
   * @return deletedDate
  **/
  @javax.annotation.Nullable
  public String getDeletedDate() {
    return deletedDate;
  }


  public void setDeletedDate(String deletedDate) {
    this.deletedDate = deletedDate;
  }


  public EntityBan bannedBy(EntityUser bannedBy) {
    
    this.bannedBy = bannedBy;
    return this;
  }

   /**
   * Get bannedBy
   * @return bannedBy
  **/
  @javax.annotation.Nullable
  public EntityUser getBannedBy() {
    return bannedBy;
  }


  public void setBannedBy(EntityUser bannedBy) {
    this.bannedBy = bannedBy;
  }


  public EntityBan lastModifiedBy(String lastModifiedBy) {
    
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

   /**
   * Get lastModifiedBy
   * @return lastModifiedBy
  **/
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }


  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public EntityBan id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public EntityBan user(EntityUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public EntityUser getUser() {
    return user;
  }


  public void setUser(EntityUser user) {
    this.user = user;
  }


  public EntityBan deletedBy(String deletedBy) {
    
    this.deletedBy = deletedBy;
    return this;
  }

   /**
   * Get deletedBy
   * @return deletedBy
  **/
  @javax.annotation.Nullable
  public String getDeletedBy() {
    return deletedBy;
  }


  public void setDeletedBy(String deletedBy) {
    this.deletedBy = deletedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityBan entityBan = (EntityBan) o;
    return Objects.equals(this.entityName, entityBan.entityName) &&
        Objects.equals(this.instanceName, entityBan.instanceName) &&
        Objects.equals(this.reason, entityBan.reason) &&
        Objects.equals(this.createdDate, entityBan.createdDate) &&
        Objects.equals(this.createdBy, entityBan.createdBy) &&
        Objects.equals(this.lastModifiedDate, entityBan.lastModifiedDate) &&
        Objects.equals(this.deletedDate, entityBan.deletedDate) &&
        Objects.equals(this.bannedBy, entityBan.bannedBy) &&
        Objects.equals(this.lastModifiedBy, entityBan.lastModifiedBy) &&
        Objects.equals(this.id, entityBan.id) &&
        Objects.equals(this.user, entityBan.user) &&
        Objects.equals(this.deletedBy, entityBan.deletedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityName, instanceName, reason, createdDate, createdBy, lastModifiedDate, deletedDate, bannedBy, lastModifiedBy, id, user, deletedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityBan {\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    deletedDate: ").append(toIndentedString(deletedDate)).append("\n");
    sb.append("    bannedBy: ").append(toIndentedString(bannedBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_entityName");
    openapiFields.add("_instanceName");
    openapiFields.add("reason");
    openapiFields.add("createdDate");
    openapiFields.add("createdBy");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("deletedDate");
    openapiFields.add("bannedBy");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("id");
    openapiFields.add("user");
    openapiFields.add("deletedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EntityBan
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EntityBan.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityBan is not found in the empty JSON string", EntityBan.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EntityBan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityBan` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("_entityName") != null && !jsonObj.get("_entityName").isJsonNull()) && !jsonObj.get("_entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_entityName").toString()));
      }
      if ((jsonObj.get("_instanceName") != null && !jsonObj.get("_instanceName").isJsonNull()) && !jsonObj.get("_instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_instanceName").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) && !jsonObj.get("lastModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedDate").toString()));
      }
      if ((jsonObj.get("deletedDate") != null && !jsonObj.get("deletedDate").isJsonNull()) && !jsonObj.get("deletedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedDate").toString()));
      }
      // validate the optional field `bannedBy`
      if (jsonObj.get("bannedBy") != null && !jsonObj.get("bannedBy").isJsonNull()) {
        EntityUser.validateJsonObject(jsonObj.getAsJsonObject("bannedBy"));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EntityUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      if ((jsonObj.get("deletedBy") != null && !jsonObj.get("deletedBy").isJsonNull()) && !jsonObj.get("deletedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityBan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityBan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityBan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityBan.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityBan>() {
           @Override
           public void write(JsonWriter out, EntityBan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityBan read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntityBan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntityBan
  * @throws IOException if the JSON string is invalid with respect to EntityBan
  */
  public static EntityBan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityBan.class);
  }

 /**
  * Convert an instance of EntityBan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


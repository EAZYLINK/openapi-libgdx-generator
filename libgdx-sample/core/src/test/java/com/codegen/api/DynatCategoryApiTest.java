/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.api;

import com.codegen.ApiException;
import com.codegen.models.EntitiesDynatCategorySearchPostRequest;
import com.codegen.models.EntityDynatCategory;
import com.codegen.models.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DynatCategoryApi
 */
@Disabled
public class DynatCategoryApiTest {

    private final DynatCategoryApi api = new DynatCategoryApi();

    /**
     * Deletes the entity: dynat_Category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategoryEntityIdDeleteTest() throws ApiException {
        String entityId = null;
        api.entitiesDynatCategoryEntityIdDelete(entityId);
        // TODO: test validations
    }

    /**
     * Gets a single entity by identifier: dynat_Category
     *
     * Gets a single entity by identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategoryEntityIdGetTest() throws ApiException {
        String entityId = null;
        Boolean dynamicAttributes = null;
        Boolean returnNulls = null;
        String fetchPlan = null;
        EntityDynatCategory response = api.entitiesDynatCategoryEntityIdGet(entityId, dynamicAttributes, returnNulls, fetchPlan);
        // TODO: test validations
    }

    /**
     * Updates the entity: dynat_Category
     *
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategoryEntityIdPutTest() throws ApiException {
        String entityId = null;
        EntityDynatCategory entityDynatCategory = null;
        EntityDynatCategory response = api.entitiesDynatCategoryEntityIdPut(entityId, entityDynatCategory);
        // TODO: test validations
    }

    /**
     * Gets a list of entities: dynat_Category
     *
     * Gets a list of entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategoryGetTest() throws ApiException {
        Boolean returnCount = null;
        String offset = null;
        String limit = null;
        String sort = null;
        Boolean dynamicAttributes = null;
        Boolean returnNulls = null;
        String fetchPlan = null;
        List<EntityDynatCategory> response = api.entitiesDynatCategoryGet(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        // TODO: test validations
    }

    /**
     * Creates new entity: dynat_Category
     *
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategoryPostTest() throws ApiException {
        EntityDynatCategory entityDynatCategory = null;
        EntityDynatCategory response = api.entitiesDynatCategoryPost(entityDynatCategory);
        // TODO: test validations
    }

    /**
     * Find entities by filter conditions: dynat_Category
     *
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategorySearchGetTest() throws ApiException {
        String filter = null;
        Boolean returnCount = null;
        String offset = null;
        String limit = null;
        String sort = null;
        Boolean dynamicAttributes = null;
        Boolean returnNulls = null;
        String fetchPlan = null;
        List<EntityDynatCategory> response = api.entitiesDynatCategorySearchGet(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        // TODO: test validations
    }

    /**
     * Find entities by filter conditions: dynat_Category
     *
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesDynatCategorySearchPostTest() throws ApiException {
        EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest = null;
        List<EntityDynatCategory> response = api.entitiesDynatCategorySearchPost(entitiesDynatCategorySearchPostRequest);
        // TODO: test validations
    }

}

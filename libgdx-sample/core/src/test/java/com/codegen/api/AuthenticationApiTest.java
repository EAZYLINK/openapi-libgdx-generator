/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.api;

import com.codegen.ApiException;
import com.codegen.models.EntityUser;
import com.codegen.models.Error;
import com.codegen.models.ServicesAuthenticationAddUsernamePasswordPostRequest;
import com.codegen.models.ServicesAuthenticationLoginWithCustomIdPostRequest;
import com.codegen.models.ServicesAuthenticationLoginWithEmailPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * authentication#addUsernamePassword
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationAddUsernamePasswordGetTest() throws ApiException {
        String user = null;
        String username = null;
        String email = null;
        String password = null;
        String response = api.servicesAuthenticationAddUsernamePasswordGet(user, username, email, password);
        // TODO: test validations
    }

    /**
     * authentication#addUsernamePassword
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationAddUsernamePasswordPostTest() throws ApiException {
        ServicesAuthenticationAddUsernamePasswordPostRequest servicesAuthenticationAddUsernamePasswordPostRequest = null;
        String response = api.servicesAuthenticationAddUsernamePasswordPost(servicesAuthenticationAddUsernamePasswordPostRequest);
        // TODO: test validations
    }

    /**
     * authentication#loginAnonymously
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationLoginAnonymouslyGetTest() throws ApiException {
        EntityUser response = api.servicesAuthenticationLoginAnonymouslyGet();
        // TODO: test validations
    }

    /**
     * authentication#loginAnonymously
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationLoginAnonymouslyPostTest() throws ApiException {
        Object body = null;
        EntityUser response = api.servicesAuthenticationLoginAnonymouslyPost(body);
        // TODO: test validations
    }

    /**
     * authentication#loginWithCustomId
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationLoginWithCustomIdGetTest() throws ApiException {
        String customId = null;
        String createIfNotExists = null;
        EntityUser response = api.servicesAuthenticationLoginWithCustomIdGet(customId, createIfNotExists);
        // TODO: test validations
    }

    /**
     * authentication#loginWithCustomId
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationLoginWithCustomIdPostTest() throws ApiException {
        ServicesAuthenticationLoginWithCustomIdPostRequest servicesAuthenticationLoginWithCustomIdPostRequest = null;
        EntityUser response = api.servicesAuthenticationLoginWithCustomIdPost(servicesAuthenticationLoginWithCustomIdPostRequest);
        // TODO: test validations
    }

    /**
     * authentication#loginWithEmail
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationLoginWithEmailGetTest() throws ApiException {
        String email = null;
        String password = null;
        EntityUser response = api.servicesAuthenticationLoginWithEmailGet(email, password);
        // TODO: test validations
    }

    /**
     * authentication#loginWithEmail
     *
     * Executes the service method. This request expects query parameters with the names defined in services configuration on the middleware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAuthenticationLoginWithEmailPostTest() throws ApiException {
        ServicesAuthenticationLoginWithEmailPostRequest servicesAuthenticationLoginWithEmailPostRequest = null;
        EntityUser response = api.servicesAuthenticationLoginWithEmailPost(servicesAuthenticationLoginWithEmailPostRequest);
        // TODO: test validations
    }

}

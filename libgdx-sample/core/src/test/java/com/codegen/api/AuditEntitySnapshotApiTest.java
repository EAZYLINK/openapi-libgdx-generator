/*
 * Project REST API
 * Generated REST API documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.codegen.api;

import com.codegen.ApiException;
import com.codegen.models.EntitiesDynatCategorySearchPostRequest;
import com.codegen.models.EntityAuditEntitySnapshot;
import com.codegen.models.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuditEntitySnapshotApi
 */
@Disabled
public class AuditEntitySnapshotApiTest {

    private final AuditEntitySnapshotApi api = new AuditEntitySnapshotApi();

    /**
     * Deletes the entity: audit_EntitySnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotEntityIdDeleteTest() throws ApiException {
        String entityId = null;
        api.entitiesAuditEntitySnapshotEntityIdDelete(entityId);
        // TODO: test validations
    }

    /**
     * Gets a single entity by identifier: audit_EntitySnapshot
     *
     * Gets a single entity by identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotEntityIdGetTest() throws ApiException {
        String entityId = null;
        Boolean dynamicAttributes = null;
        Boolean returnNulls = null;
        String fetchPlan = null;
        EntityAuditEntitySnapshot response = api.entitiesAuditEntitySnapshotEntityIdGet(entityId, dynamicAttributes, returnNulls, fetchPlan);
        // TODO: test validations
    }

    /**
     * Updates the entity: audit_EntitySnapshot
     *
     * Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotEntityIdPutTest() throws ApiException {
        String entityId = null;
        EntityAuditEntitySnapshot entityAuditEntitySnapshot = null;
        EntityAuditEntitySnapshot response = api.entitiesAuditEntitySnapshotEntityIdPut(entityId, entityAuditEntitySnapshot);
        // TODO: test validations
    }

    /**
     * Gets a list of entities: audit_EntitySnapshot
     *
     * Gets a list of entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotGetTest() throws ApiException {
        Boolean returnCount = null;
        String offset = null;
        String limit = null;
        String sort = null;
        Boolean dynamicAttributes = null;
        Boolean returnNulls = null;
        String fetchPlan = null;
        List<EntityAuditEntitySnapshot> response = api.entitiesAuditEntitySnapshotGet(returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        // TODO: test validations
    }

    /**
     * Creates new entity: audit_EntitySnapshot
     *
     * The method expects a JSON with entity object in the request body. The entity object may contain references to other entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotPostTest() throws ApiException {
        EntityAuditEntitySnapshot entityAuditEntitySnapshot = null;
        EntityAuditEntitySnapshot response = api.entitiesAuditEntitySnapshotPost(entityAuditEntitySnapshot);
        // TODO: test validations
    }

    /**
     * Find entities by filter conditions: audit_EntitySnapshot
     *
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed as URL parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotSearchGetTest() throws ApiException {
        String filter = null;
        Boolean returnCount = null;
        String offset = null;
        String limit = null;
        String sort = null;
        Boolean dynamicAttributes = null;
        Boolean returnNulls = null;
        String fetchPlan = null;
        List<EntityAuditEntitySnapshot> response = api.entitiesAuditEntitySnapshotSearchGet(filter, returnCount, offset, limit, sort, dynamicAttributes, returnNulls, fetchPlan);
        // TODO: test validations
    }

    /**
     * Find entities by filter conditions: audit_EntitySnapshot
     *
     * Finds entities by filter conditions. The filter is defined by JSON object that is passed in body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesAuditEntitySnapshotSearchPostTest() throws ApiException {
        EntitiesDynatCategorySearchPostRequest entitiesDynatCategorySearchPostRequest = null;
        List<EntityAuditEntitySnapshot> response = api.entitiesAuditEntitySnapshotSearchPost(entitiesDynatCategorySearchPostRequest);
        // TODO: test validations
    }

}

package {{apiPackage}};

import com.badlogic.gdx.Net;
import com.badlogic.gdx.net.HttpRequestBuilder;
import com.badlogic.gdx.utils.Json;
import {{modelPackage}}.*;
import java.util.*;

public class {{classname}}Impl implements {{classname}} {
    private final String baseUrl;
    private final Json json;

    public {{classname}}Impl(String baseUrl) {
        this.baseUrl = baseUrl.endsWith("/") ? baseUrl : baseUrl + "/";
        this.json = new Json();
    }

    {{#operations}}
    {{#operation}}
    @Override
    public void {{operationId}}( {{#allParams}}{{#isQueryParam}}{{dataType}} {{paramName}}, {{/isQueryParam}}{{#isPathParam}}{{dataType}} {{paramName}}, {{/isPathParam}}{{#isBodyParam}}{{dataType}} {{paramName}}, {{/isBodyParam}}{{/allParams}}Callback<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> callback) {
        String url = baseUrl + "{{path}}";
        {{#isPathParam}}
        url = url.replace("{ {{paramName}} }", {{paramName}}.toString());
        {{/isPathParam}}
        {{#isQueryParam}}
        StringBuilder query = new StringBuilder();
        if ({{paramName}} != null) {
            query.append(query.length() == 0 ? "?" : "&")
                 .append("{{paramName}}=").append({{paramName}}.toString());
        }
        url += query.toString();
        {{/isQueryParam}}

        HttpRequestBuilder builder = new HttpRequestBuilder();
        Net.HttpRequest request = builder.newRequest()
                .method("{{httpMethod}}")
                .url(url)
                {{#isBodyParam}}
                .content(json.toJson({{paramName}}))
                .header("Content-Type", "application/json")
                {{/isBodyParam}}
                .build();

        Gdx.net.sendHttpRequest(request, new Net.HttpResponseListener() {
            @Override
            public void handleHttpResponse(Net.HttpResponse httpResponse) {
                int status = httpResponse.getStatus().getStatusCode();
                String responseData = httpResponse.getResultAsString();

                if (status == {{responses.0.code}}) {
                    {{#returnType}}
                    {{returnType}} result = json.fromJson({{{returnType}}}.class, responseData);
                    callback.onSuccess(result);
                    {{/returnType}}
                    {{^returnType}}
                    callback.onSuccess(null);
                    {{/returnType}}
                } else {
                    callback.onFailure(new Exception("HTTP " + status + ": " + responseData));
                }
            }

            @Override
            public void failed(Throwable t) {
                callback.onFailure(new Exception(t));
            }

            @Override
            public void cancelled() {
                callback.onFailure(new Exception("Request cancelled"));
            }
        });
    }
    {{/operation}}
    {{/operations}}
}